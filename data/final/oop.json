[
  {
    "Id": 1,
    "question": "What is a class in object-oriented programming?",
    "optionList": [
      "A blueprint for creating objects",
      "A built-in function",
      "A variable declaration",
      "A loop construct"
    ],
    "answer": 0
  },
  {
    "Id": 2,
    "question": "Which keyword is used to create an instance of a class in C++?",
    "optionList": [
      "new",
      "create",
      "instance",
      "instantiate"
    ],
    "answer": 0
  },
  {
    "Id": 3,
    "question": "What is the purpose of a constructor method in a class?",
    "optionList": [
      "To destroy objects",
      "To initialize objects",
      "To declare member variables",
      "To define static members"
    ],
    "answer": 1
  },
  {
    "Id": 4,
    "question": "When is the destructor method called in C++?",
    "optionList": [
      "When an object is created",
      "When an object is destroyed",
      "When a member function is called",
      "When a static member is accessed"
    ],
    "answer": 1
  },
  {
    "Id": 5,
    "question": "Which access specifier restricts access to class members only within the class?",
    "optionList": [
      "public",
      "private",
      "protected",
      "static"
    ],
    "answer": 1
  },
  {
    "Id": 6,
    "question": "What do member variables represent in a class?",
    "optionList": [
      "Actions performed by objects",
      "Data associated with objects",
      "Static properties of the class",
      "Constructors of the class"
    ],
    "answer": 1
  },
  {
    "Id": 7,
    "question": "Which keyword is used to declare member functions outside the class definition in C++?",
    "optionList": [
      "def",
      "function",
      "method",
      "none of the above"
    ],
    "answer": 3
  },
  {
    "Id": 8,
    "question": "Which keyword is used to access static members of a class?",
    "optionList": [
      "this",
      "super",
      "static",
      "global"
    ],
    "answer": 2
  },
  {
    "Id": 9,
    "question": "What is the purpose of static members in a class?",
    "optionList": [
      "They can only be accessed by member functions.",
      "They belong to the class rather than individual objects.",
      "They can be accessed outside the class without instantiation.",
      "They are automatically initialized to 0."
    ],
    "answer": 1
  },
  {
    "Id": 10,
    "question": "Which access specifier allows access to class members by derived classes?",
    "optionList": [
      "public",
      "private",
      "protected",
      "static"
    ],
    "answer": 2
  },
  {
    "Id": 11,
    "question": "What is the function of a constructor in object-oriented programming?",
    "optionList": [
      "To initialize member variables of a class",
      "To deallocate memory",
      "To define static variables",
      "To access private members of a class"
    ],
    "answer": 0
  },
  {
    "Id": 12,
    "question": "In C++, which access specifier restricts access to class members from outside the class?",
    "optionList": [
      "public",
      "private",
      "protected",
      "static"
    ],
    "answer": 1
  },
  {
    "Id": 13,
    "question": "What are member variables commonly referred to as in other programming languages?",
    "optionList": [
      "Properties",
      "Methods",
      "Functions",
      "Arguments"
    ],
    "answer": 0
  },
  {
    "Id": 14,
    "question": "Which keyword is used to declare a destructor in C++?",
    "optionList": [
      "~destructor",
      "destroy",
      "destruct",
      "none of the above"
    ],
    "answer": 3
  },
  {
    "Id": 15,
    "question": "When is the constructor of a class called in C++?",
    "optionList": [
      "When an object is created",
      "When an object is destroyed",
      "When a member function is called",
      "When a static member is accessed"
    ],
    "answer": 0
  },
  {
    "Id": 16,
    "question": "What is the main purpose of using access specifiers in a class?",
    "optionList": [
      "To specify the return type of member functions",
      "To control the visibility of class members",
      "To define static members",
      "To declare member variables"
    ],
    "answer": 1
  },
  {
    "Id": 17,
    "question": "Which keyword is used to create an instance of a class in Java?",
    "optionList": [
      "new",
      "create",
      "instance",
      "instantiate"
    ],
    "answer": 0
  },
  {
    "Id": 18,
    "question": "In C++, how can you access a private member of a class from outside the class?",
    "optionList": [
      "By using the public access specifier",
      "By using a friend function or class",
      "By using the protected access specifier",
      "It's not possible"
    ],
    "answer": 1
  },
  {
    "Id": 19,
    "question": "What happens if a destructor is not explicitly defined in a class in C++?",
    "optionList": [
      "The compiler will automatically generate one.",
      "The destructor of the base class is used.",
      "It results in a compilation error.",
      "It leads to memory leaks."
    ],
    "answer": 0
  },
  {
    "Id": 20,
    "question": "Which access specifier allows access to class members within the same package in Java?",
    "optionList": [
      "public",
      "private",
      "protected",
      "default"
    ],
    "answer": 3
  },
  {
    "Id": 21,
    "question": "Which keyword is used to access member variables and methods within a class in C++?",
    "optionList": [
      "access",
      "this",
      "self",
      "instance"
    ],
    "answer": 1
  },
  {
    "Id": 22,
    "question": "What is the purpose of a static member in a class?",
    "optionList": [
      "To initialize objects",
      "To define class-wide properties or methods",
      "To access private members",
      "To create multiple instances of a class"
    ],
    "answer": 1
  },
  {
    "Id": 23,
    "question": "What is the default access specifier for members of a class in Java if no specifier is specified?",
    "optionList": [
      "public",
      "private",
      "protected",
      "default"
    ],
    "answer": 3
  },
  {
    "Id": 24,
    "question": "Which of the following is true about a constructor in a class?",
    "optionList": [
      "It returns a value",
      "It can be inherited",
      "It is called explicitly",
      "It has the same name as the class"
    ],
    "answer": 3
  },
  {
    "Id": 25,
    "question": "In C++, which access specifier allows access to class members only by the class itself and its friends?",
    "optionList": [
      "public",
      "private",
      "protected",
      "friend"
    ],
    "answer": 3
  },
  {
    "Id": 26,
    "question": "What is the purpose of a destructor in C++?",
    "optionList": [
      "To create objects",
      "To initialize objects",
      "To deallocate resources",
      "To access private members"
    ],
    "answer": 2
  },
  {
    "Id": 27,
    "question": "Which keyword is used to define a static member variable in C++?",
    "optionList": [
      "static",
      "class",
      "member",
      "object"
    ],
    "answer": 0
  },
  {
    "Id": 28,
    "question": "What is the main difference between a constructor and a destructor in C++?",
    "optionList": [
      "Constructors allocate memory, while destructors deallocate memory.",
      "Constructors are called when an object is destroyed, while destructors are called when an object is created.",
      "Constructors initialize objects, while destructors clean up resources.",
      "Constructors have a return type, while destructors don't."
    ],
    "answer": 2
  },
  {
    "Id": 29,
    "question": "Which access specifier allows access to class members by any code in the program?",
    "optionList": [
      "public",
      "private",
      "protected",
      "global"
    ],
    "answer": 0
  },
  {
    "Id": 30,
    "question": "What is the purpose of access specifiers in a class?",
    "optionList": [
      "To define the behavior of the class",
      "To control the visibility of class members",
      "To specify the data type of member variables",
      "To manage memory allocation"
    ],
    "answer": 1
  },
  {
    "Id": 31,
    "question": "What happens if a class has both constructor and destructor methods defined?",
    "optionList": [
      "The destructor will be called first, followed by the constructor.",
      "The constructor will be called first, followed by the destructor.",
      "Both will be called simultaneously.",
      "It leads to a compilation error."
    ],
    "answer": 1
  },
  {
    "Id": 32,
    "question": "Which keyword is used to access the current object within a member function in C++?",
    "optionList": [
      "this",
      "super",
      "current",
      "self"
    ],
    "answer": 0
  },
  {
    "Id": 33,
    "question": "In C++, which access specifier allows access to class members only by the class itself and its derived classes?",
    "optionList": [
      "public",
      "private",
      "protected",
      "friend"
    ],
    "answer": 2
  },
  {
    "Id": 34,
    "question": "What is the primary role of member functions in a class?",
    "optionList": [
      "To define the structure of a class",
      "To initialize objects",
      "To perform operations on member variables",
      "To declare static members"
    ],
    "answer": 2
  },
  {
    "Id": 35,
    "question": "Which access specifier restricts access to class members only within the same class hierarchy in C++?",
    "optionList": [
      "public",
      "private",
      "protected",
      "friend"
    ],
    "answer": 2
  },
  {
    "Id": 36,
    "question": "What is the purpose of a constructor in Java?",
    "optionList": [
      "To destroy objects",
      "To initialize objects",
      "To deallocate resources",
      "To access private members"
    ],
    "answer": 1
  },
  {
    "Id": 37,
    "question": "Which keyword is used to access a member variable or method of the current object in Java?",
    "optionList": [
      "this",
      "super",
      "self",
      "current"
    ],
    "answer": 0
  },
  {
    "Id": 38,
    "question": "In Java, which access specifier allows access to class members within the same package and by subclasses?",
    "optionList": [
      "public",
      "private",
      "protected",
      "default"
    ],
    "answer": 2
  },
  {
    "Id": 39,
    "question": "What is the role of access specifiers in encapsulation?",
    "optionList": [
      "To control the visibility of class members",
      "To define the behavior of the class",
      "To specify the return type of member functions",
      "To initialize objects"
    ],
    "answer": 0
  },
  {
    "Id": 40,
    "question": "Which keyword is used to define a static member function in C++?",
    "optionList": [
      "static",
      "class",
      "function",
      "method"
    ],
    "answer": 0
  },
  {
    "Id": 41,
    "question": "What is the purpose of using static members in a class?",
    "optionList": [
      "To initialize objects",
      "To define class-wide properties or methods",
      "To access private members",
      "To create multiple instances of a class"
    ],
    "answer": 1
  },
  {
    "Id": 42,
    "question": "In Java, which access specifier allows access to class members by any code in the program?",
    "optionList": [
      "public",
      "private",
      "protected",
      "default"
    ],
    "answer": 0
  },
  {
    "Id": 43,
    "question": "Which keyword is used to access a static member of a class in C++?",
    "optionList": [
      "static",
      "this",
      "super",
      "current"
    ],
    "answer": 0
  },
  {
    "Id": 44,
    "question": "What is the purpose of a destructor in Java?",
    "optionList": [
      "To initialize objects",
      "To access private members",
      "To deallocate resources",
      "To create objects"
    ],
    "answer": 2
  },
  {
    "Id": 45,
    "question": "Which access specifier restricts access to class members from outside the class in Java?",
    "optionList": [
      "public",
      "private",
      "protected",
      "default"
    ],
    "answer": 1
  },
  {
    "Id": 46,
    "question": "What happens if a class has both constructor and destructor methods defined in Java?",
    "optionList": [
      "The constructor will be called first, followed by the destructor.",
      "The destructor will be called first, followed by the constructor.",
      "Both will be called simultaneously.",
      "It leads to a compilation error."
    ],
    "answer": 0
  },
  {
    "Id": 47,
    "question": "Which keyword is used to access a member variable or method of the current object in C++?",
    "optionList": [
      "this",
      "super",
      "self",
      "current"
    ],
    "answer": 0
  },
  {
    "Id": 48,
    "question": "In Java, what is the main purpose of using access specifiers?",
    "optionList": [
      "To define the behavior of the class",
      "To control the visibility of class members",
      "To specify the return type of member functions",
      "To manage memory allocation"
    ],
    "answer": 1
  },
  {
    "Id": 49,
    "question": "What is the primary role of member functions in Java?",
    "optionList": [
      "To define the structure of a class",
      "To initialize objects",
      "To perform operations on member variables",
      "To declare static members"
    ],
    "answer": 2
  },
  {
    "Id": 50,
    "question": "Which access specifier restricts access to class members only within the same package in Java?",
    "optionList": [
      "public",
      "private",
      "protected",
      "default"
    ],
    "answer": 3
  },
  {
    "Id": 51,
    "question": "What is the purpose of a static member function in C++?",
    "optionList": [
      "To initialize objects",
      "To define class-wide properties or methods",
      "To access private members",
      "To create multiple instances of a class"
    ],
    "answer": 1
  },
  {
    "Id": 52,
    "question": "In C++, which access specifier allows access to class members within the same package and by subclasses?",
    "optionList": [
      "public",
      "private",
      "protected",
      "friend"
    ],
    "answer": 2
  },
  {
    "Id": 53,
    "question": "Which keyword is used to define a static member variable in Java?",
    "optionList": [
      "static",
      "class",
      "member",
      "object"
    ],
    "answer": 0
  },
  {
    "Id": 54,
    "question": "What is the purpose of using static members in a class in Java?",
    "optionList": [
      "To initialize objects",
      "To define class-wide properties or methods",
      "To access private members",
      "To create multiple instances of a class"
    ],
    "answer": 1
  },
  {
    "Id": 55,
    "question": "In C++, which access specifier allows access to class members by any code in the program?",
    "optionList": [
      "public",
      "private",
      "protected",
      "global"
    ],
    "answer": 0
  },
  {
    "Id": 56,
    "question": "Which access specifier restricts access to class members from outside the class in C++?",
    "optionList": [
      "public",
      "private",
      "protected",
      "friend"
    ],
    "answer": 1
  },
  {
    "Id": 57,
    "question": "What happens if a class has both constructor and destructor methods defined in C++?",
    "optionList": [
      "The destructor will be called first, followed by the constructor.",
      "The constructor will be called first, followed by the destructor.",
      "Both will be called simultaneously.",
      "It leads to a compilation error."
    ],
    "answer": 0
  },
  {
    "Id": 58,
    "question": "In C++, what is the main purpose of using access specifiers?",
    "optionList": [
      "To define the behavior of the class",
      "To control the visibility of class members",
      "To specify the return type of member functions",
      "To manage memory allocation"
    ],
    "answer": 1
  },
  {
    "Id": 59,
    "question": "What is the primary role of member functions in C++?",
    "optionList": [
      "To define the structure of a class",
      "To initialize objects",
      "To perform operations on member variables",
      "To declare static members"
    ],
    "answer": 2
  },
  {
    "Id": 60,
    "question": "What is the purpose of a static member function in Java?",
    "optionList": [
      "To initialize objects",
      "To define class-wide properties or methods",
      "To access private members",
      "To create multiple instances of a class"
    ],
    "answer": 1
  },
  {
    "Id": 61,
    "question": "What is the purpose of using static members in a class in C++?",
    "optionList": [
      "To initialize objects",
      "To define class-wide properties or methods",
      "To access private members",
      "To create multiple instances of a class"
    ],
    "answer": 1
  },
  {
    "Id": 62,
    "question": "What is data hiding in object-oriented programming?",
    "optionList": [
      "Concealing data within the class",
      "Exposing data to external classes",
      "Deleting data from memory",
      "Encrypting data for security"
    ],
    "answer": 0
  },
  {
    "Id": 63,
    "question": "Which principle of object-oriented programming emphasizes data hiding?",
    "optionList": [
      "Encapsulation",
      "Inheritance",
      "Polymorphism",
      "Abstraction"
    ],
    "answer": 0
  },
  {
    "Id": 64,
    "question": "What is the primary benefit of data hiding?",
    "optionList": [
      "Improved code readability",
      "Enhanced security and privacy of data",
      "Faster program execution",
      "Easier debugging"
    ],
    "answer": 1
  },
  {
    "Id": 65,
    "question": "Which access specifier is commonly used to implement data hiding in classes?",
    "optionList": [
      "public",
      "private",
      "protected",
      "static"
    ],
    "answer": 1
  },
  {
    "Id": 66,
    "question": "What is information hiding in object-oriented programming?",
    "optionList": [
      "Concealing the behavior of methods",
      "Exposing internal implementation details",
      "Protecting data from unauthorized access",
      "Optimizing memory usage"
    ],
    "answer": 2
  },
  {
    "Id": 67,
    "question": "Which concept focuses on hiding unnecessary details from the outside world?",
    "optionList": [
      "Encapsulation",
      "Inheritance",
      "Polymorphism",
      "Abstraction"
    ],
    "answer": 3
  },
  {
    "Id": 68,
    "question": "What is the main goal of information hiding?",
    "optionList": [
      "Simplifying code",
      "Improving code performance",
      "Reducing code duplication",
      "Minimizing the impact of changes"
    ],
    "answer": 3
  },
  {
    "Id": 69,
    "question": "Which programming principle encourages developers to expose only necessary information?",
    "optionList": [
      "Encapsulation",
      "Inheritance",
      "Polymorphism",
      "Abstraction"
    ],
    "answer": 0
  },
  {
    "Id": 70,
    "question": "What are accessor methods in object-oriented programming?",
    "optionList": [
      "Methods used to access external libraries",
      "Methods used to manipulate data within objects",
      "Methods used to access and modify object attributes",
      "Methods used to validate user input"
    ],
    "answer": 2
  },
  {
    "Id": 71,
    "question": "What is the purpose of a getter method?",
    "optionList": [
      "To set the value of an attribute",
      "To delete an attribute",
      "To retrieve the value of an attribute",
      "To perform calculations on attributes"
    ],
    "answer": 2
  },
  {
    "Id": 72,
    "question": "Which term is commonly used to refer to getter and setter methods collectively?",
    "optionList": [
      "Mutators",
      "Accessors",
      "Modifiers",
      "Inspectors"
    ],
    "answer": 1
  },
  {
    "Id": 73,
    "question": "In object-oriented programming, what is the role of setter methods?",
    "optionList": [
      "To retrieve data from objects",
      "To validate input data",
      "To initialize object attributes",
      "To update or modify object attributes"
    ],
    "answer": 3
  },
  {
    "Id": 74,
    "question": "Which access specifier is typically used for setter methods?",
    "optionList": [
      "public",
      "private",
      "protected",
      "static"
    ],
    "answer": 0
  },
  {
    "Id": 75,
    "question": "Which of the following best describes the purpose of accessor methods?",
    "optionList": [
      "To provide a way to access and modify private attributes",
      "To perform complex calculations",
      "To control the visibility of class members",
      "To define the behavior of a class"
    ],
    "answer": 0
  },
  {
    "Id": 76,
    "question": "What is the benefit of using accessor methods instead of directly accessing attributes?",
    "optionList": [
      "Improved code performance",
      "Enhanced data encapsulation",
      "Reduced code complexity",
      "Increased code reusability"
    ],
    "answer": 1
  },
  {
    "Id": 77,
    "question": "Which programming principle encourages the use of accessor methods for attribute access?",
    "optionList": [
      "Encapsulation",
      "Inheritance",
      "Polymorphism",
      "Abstraction"
    ],
    "answer": 0
  },
  {
    "Id": 78,
    "question": "In object-oriented programming, what is the primary purpose of encapsulation?",
    "optionList": [
      "To improve code readability",
      "To simplify program architecture",
      "To protect data integrity",
      "To optimize code execution"
    ],
    "answer": 2
  },
  {
    "Id": 79,
    "question": "Which of the following best describes the concept of encapsulation?",
    "optionList": [
      "Bundling data and methods that operate on the data into a single unit",
      "Hiding internal implementation details from the outside world",
      "Inheriting properties and behaviors from a parent class",
      "Creating multiple instances of a class"
    ],
    "answer": 0
  },
  {
    "Id": 80,
    "question": "What is the primary advantage of encapsulation in object-oriented programming?",
    "optionList": [
      "Code reusability",
      "Improved code performance",
      "Enhanced security and data protection",
      "Simplified program architecture"
    ],
    "answer": 2
  },
  {
    "Id": 81,
    "question": "Which programming principle promotes the idea of bundling data and methods into cohesive units?",
    "optionList": [
      "Encapsulation",
      "Inheritance",
      "Polymorphism",
      "Abstraction"
    ],
    "answer": 0
  },
  {
    "Id": 82,
    "question": "In object-oriented programming, what is the purpose of information hiding?",
    "optionList": [
      "To expose internal implementation details",
      "To protect data from unauthorized access",
      "To simplify code execution",
      "To enhance code readability"
    ],
    "answer": 1
  },
  {
    "Id": 83,
    "question": "Which term is synonymous with information hiding in object-oriented programming?",
    "optionList": [
      "Encapsulation",
      "Abstraction",
      "Polymorphism",
      "Inheritance"
    ],
    "answer": 0
  },
  {
    "Id": 84,
    "question": "What is the primary benefit of information hiding?",
    "optionList": [
      "Improved code performance",
      "Reduced code complexity",
      "Enhanced security and data protection",
      "Simplified code execution"
    ],
    "answer": 2
  },
  {
    "Id": 85,
    "question": "Which programming principle emphasizes exposing only essential information to the outside world?",
    "optionList": [
      "Encapsulation",
      "Inheritance",
      "Polymorphism",
      "Abstraction"
    ],
    "answer": 0
  },
  {
    "Id": 86,
    "question": "What is the main purpose of accessor methods in object-oriented programming?",
    "optionList": [
      "To manipulate data within objects",
      "To expose internal implementation details",
      "To access and modify object attributes",
      "To validate user input"
    ],
    "answer": 2
  },
  {
    "Id": 87,
    "question": "Which term is commonly used to refer to methods used to retrieve and update object attributes?",
    "optionList": [
      "Mutators",
      "Accessors",
      "Modifiers",
      "Inspectors"
    ],
    "answer": 1
  },
  {
    "Id": 88,
    "question": "What is the primary role of getter methods in object-oriented programming?",
    "optionList": [
      "To retrieve data from objects",
      "To delete object attributes",
      "To initialize object attributes",
      "To update or modify object attributes"
    ],
    "answer": 0
  },
  {
    "Id": 89,
    "question": "Which access specifier is typically used for getter methods?",
    "optionList": [
      "public",
      "private",
      "protected",
      "static"
    ],
    "answer": 0
  },
  {
    "Id": 90,
    "question": "What is the primary purpose of setter methods in object-oriented programming?",
    "optionList": [
      "To retrieve data from objects",
      "To validate user input",
      "To initialize object attributes",
      "To update or modify object attributes"
    ],
    "answer": 3
  },
  {
    "Id": 91,
    "question": "In object-oriented programming, what is the main benefit of using setter methods?",
    "optionList": [
      "Improved code performance",
      "Enhanced data encapsulation",
      "Reduced code complexity",
      "Increased code reusability"
    ],
    "answer": 1
  },
  {
    "Id": 92,
    "question": "Which programming principle encourages the use of getter and setter methods to access and modify object attributes?",
    "optionList": [
      "Encapsulation",
      "Inheritance",
      "Polymorphism",
      "Abstraction"
    ],
    "answer": 0
  },
  {
    "Id": 93,
    "question": "What is the primary purpose of accessor methods in object-oriented programming?",
    "optionList": [
      "To manipulate data within objects",
      "To expose internal implementation details",
      "To access and modify object attributes",
      "To validate user input"
    ],
    "answer": 2
  },
  {
    "Id": 94,
    "question": "What is the main purpose of encapsulation in object-oriented programming?",
    "optionList": [
      "To improve code readability",
      "To simplify program architecture",
      "To protect data integrity",
      "To optimize code execution"
    ],
    "answer": 2
  },
  {
    "Id": 95,
    "question": "What is single inheritance in object-oriented programming?",
    "optionList": [
      "Inheriting from multiple base classes",
      "Inheriting from a single base class",
      "Inheriting from derived classes",
      "Inheriting from abstract classes"
    ],
    "answer": 1
  },
  {
    "Id": 96,
    "question": "Which of the following statements about single inheritance is true?",
    "optionList": [
      "It allows a class to inherit from multiple base classes.",
      "It allows a class to have multiple derived classes.",
      "It involves inheriting from a single base class.",
      "It is not supported in object-oriented programming languages."
    ],
    "answer": 2
  },
  {
    "Id": 97,
    "question": "In single inheritance, a derived class inherits:",
    "optionList": [
      "All members of the base class",
      "Only public members of the base class",
      "Only private members of the base class",
      "Only protected members of the base class"
    ],
    "answer": 1
  },
  {
    "Id": 98,
    "question": "Which keyword is used to denote inheritance in single inheritance?",
    "optionList": [
      "inherit",
      "extends",
      "implements",
      "inherits"
    ],
    "answer": 1
  },
  {
    "Id": 99,
    "question": "What is multilevel inheritance in object-oriented programming?",
    "optionList": [
      "Inheriting from multiple base classes",
      "Inheriting from a single base class",
      "Inheriting from derived classes",
      "Inheriting from multiple derived classes"
    ],
    "answer": 3
  },
  {
    "Id": 100,
    "question": "In multilevel inheritance, a derived class inherits from:",
    "optionList": [
      "A single base class and multiple derived classes",
      "Multiple base classes",
      "A single base class and one or more derived classes",
      "Only one derived class"
    ],
    "answer": 2
  },
  {
    "Id": 101,
    "question": "Which of the following statements about multilevel inheritance is true?",
    "optionList": [
      "It involves inheriting from multiple base classes.",
      "It allows a class to inherit from multiple derived classes.",
      "It involves a chain of inheritance, with each derived class inheriting from the one before it.",
      "It is not supported in object-oriented programming languages."
    ],
    "answer": 2
  },
  {
    "Id": 102,
    "question": "In multilevel inheritance, how many levels of classes can be there?",
    "optionList": [
      "Two",
      "Three or more",
      "One",
      "It depends on the programming language"
    ],
    "answer": 1
  },
  {
    "Id": 103,
    "question": "What is hierarchical inheritance in object-oriented programming?",
    "optionList": [
      "Inheriting from multiple base classes",
      "Inheriting from a single base class",
      "Inheriting from derived classes",
      "Inheriting from a single base class with multiple derived classes"
    ],
    "answer": 3
  },
  {
    "Id": 104,
    "question": "In hierarchical inheritance, multiple derived classes inherit from:",
    "optionList": [
      "A single base class",
      "Multiple base classes",
      "A single derived class",
      "Each other"
    ],
    "answer": 0
  },
  {
    "Id": 105,
    "question": "Which of the following statements about hierarchical inheritance is true?",
    "optionList": [
      "It involves inheriting from multiple base classes.",
      "It allows a single class to have multiple derived classes.",
      "It involves multiple derived classes inheriting from a single base class.",
      "It is not supported in object-oriented programming languages."
    ],
    "answer": 2
  },
  {
    "Id": 106,
    "question": "In hierarchical inheritance, how many classes are involved?",
    "optionList": [
      "Two",
      "Three or more",
      "One",
      "It depends on the programming language"
    ],
    "answer": 1
  },
  {
    "Id": 107,
    "question": "What is multiple inheritance in object-oriented programming?",
    "optionList": [
      "Inheriting from multiple base classes",
      "Inheriting from a single base class",
      "Inheriting from derived classes",
      "Inheriting from multiple derived classes"
    ],
    "answer": 0
  },
  {
    "Id": 108,
    "question": "In multiple inheritance, a derived class inherits from:",
    "optionList": [
      "A single base class and multiple derived classes",
      "Multiple base classes",
      "A single base class and one or more derived classes",
      "Only one derived class"
    ],
    "answer": 1
  },
  {
    "Id": 109,
    "question": "Which of the following statements about multiple inheritance is true?",
    "optionList": [
      "It involves inheriting from multiple base classes.",
      "It allows a class to inherit from multiple derived classes.",
      "It involves inheriting from a single base class with multiple derived classes.",
      "It is not supported in object-oriented programming languages."
    ],
    "answer": 0
  },
  {
    "Id": 110,
    "question": "In multiple inheritance, how are conflicts resolved if two base classes have a member with the same name?",
    "optionList": [
      "By allowing the derived class to inherit both members",
      "By selecting one of the conflicting members arbitrarily",
      "By using virtual inheritance",
      "By causing a compilation error"
    ],
    "answer": 3
  },
  {
    "Id": 111,
    "question": "Which access specifier restricts the visibility of a base class member in a derived class in C++?",
    "optionList": [
      "public",
      "protected",
      "private",
      "static"
    ],
    "answer": 1
  },
  {
    "Id": 112,
    "question": "In C++, if a base class member is declared as protected, how is it accessible in the derived class?",
    "optionList": [
      "It is accessible only within the base class.",
      "It is accessible only within the derived class.",
      "It is accessible within both the base and derived classes.",
      "It is accessible only within the same namespace."
    ],
    "answer": 2
  },
  {
    "Id": 113,
    "question": "In Java, which access specifier restricts the visibility of a base class member in a derived class within the same package?",
    "optionList": [
      "public",
      "protected",
      "private",
      "package-private (default)"
    ],
    "answer": 3
  },
  {
    "Id": 114,
    "question": "In Java, which access specifier allows a derived class in a different package to access a base class member?",
    "optionList": [
      "public",
      "protected",
      "private",
      "package-private (default)"
    ],
    "answer": 0
  },
  {
    "Id": 115,
    "question": "What is a base class in object-oriented programming?",
    "optionList": [
      "A class from which other classes are derived",
      "A class that inherits from another class",
      "A class that contains only static members",
      "A class that cannot be instantiated"
    ],
    "answer": 0
  },
  {
    "Id": 116,
    "question": "What is a derived class in object-oriented programming?",
    "optionList": [
      "A class from which other classes are derived",
      "A class that inherits from another class",
      "A class that contains only static members",
      "A class that cannot be instantiated"
    ],
    "answer": 1
  },
  {
    "Id": 117,
    "question": "Which of the following statements about base classes and derived classes is true?",
    "optionList": [
      "A base class can inherit from multiple derived classes.",
      "A derived class can inherit from multiple base classes.",
      "A base class cannot have its own members.",
      "A derived class cannot override base class members."
    ],
    "answer": 1
  },
  {
    "Id": 118,
    "question": "Can a derived class have its own members in addition to inherited members?",
    "optionList": [
      "Yes, but only if it does not override any inherited members",
      "No, a derived class can only have inherited members",
      "Yes, a derived class can have its own members regardless of inherited members",
      "No, a derived class cannot have any members"
    ],
    "answer": 2
  },
  {
    "Id": 119,
    "question": "What is polymorphism in object-oriented programming?",
    "optionList": [
      "The ability to inherit from multiple base classes",
      "The ability to have multiple derived classes",
      "The ability to represent different types of objects through a single interface",
      "The ability to have multiple constructors in a class"
    ],
    "answer": 2
  },
  {
    "Id": 120,
    "question": "Which of the following statements about polymorphism is true?",
    "optionList": [
      "It is achieved through inheritance only.",
      "It allows a function or method to have multiple definitions.",
      "It is not supported in object-oriented programming languages.",
      "It allows objects of different types to be treated as objects of a common base type."
    ],
    "answer": 3
  },
  {
    "Id": 121,
    "question": "Inheritance combined with overriding is a form of:",
    "optionList": [
      "Compile-time polymorphism",
      "Runtime polymorphism",
      "Static polymorphism",
      "Dynamic polymorphism"
    ],
    "answer": 3
  },
  {
    "Id": 122,
    "question": "Which keyword is used to implement polymorphism in C++?",
    "optionList": [
      "polymorphic",
      "virtual",
      "override",
      "polymorphism"
    ],
    "answer": 1
  },
  {
    "Id": 123,
    "question": "Which keyword is used to implement polymorphism in Java?",
    "optionList": [
      "polymorphic",
      "virtual",
      "override",
      "final"
    ],
    "answer": 2
  },
  {
    "Id": 124,
    "question": "What is the benefit of polymorphism in object-oriented programming?",
    "optionList": [
      "It reduces code complexity.",
      "It improves code performance.",
      "It allows for code reuse.",
      "It allows for more efficient memory management."
    ],
    "answer": 2
  },
  {
    "Id": 125,
    "question": "In single inheritance, can a derived class have its own members in addition to inherited members?",
    "optionList": [
      "Yes, but only if it does not override any inherited members",
      "No, a derived class can only have inherited members",
      "Yes, a derived class can have its own members regardless of inherited members",
      "No, a derived class cannot have any members"
    ],
    "answer": 2
  },
  {
    "Id": 126,
    "question": "Which of the following statements about single inheritance is correct?",
    "optionList": [
      "It allows a class to inherit from multiple base classes.",
      "It allows a class to have multiple derived classes.",
      "It involves inheriting from a single base class.",
      "It involves inheriting from multiple derived classes."
    ],
    "answer": 2
  },
  {
    "Id": 127,
    "question": "What is method overloading in Java?",
    "optionList": [
      "Defining multiple methods with the same name but different parameters in a class",
      "Defining multiple methods with the same name and parameters in a class",
      "Defining a single method with multiple return types",
      "Defining a single method with multiple access specifiers"
    ],
    "answer": 0
  },
  {
    "Id": 128,
    "question": "In method overloading, the methods must have the same:",
    "optionList": [
      "Return type",
      "Parameters",
      "Access specifier",
      "Method body"
    ],
    "answer": 1
  },
  {
    "Id": 129,
    "question": "Which of the following is true about method overloading?",
    "optionList": [
      "It only allows methods with different names.",
      "It only allows methods with different return types.",
      "It allows methods with the same name but different parameters.",
      "It allows methods with the same name and parameters."
    ],
    "answer": 2
  },
  {
    "Id": 130,
    "question": "Can method overloading be based solely on the return type of methods?",
    "optionList": [
      "Yes",
      "No",
      "Sometimes, depending on the programming language",
      "Only in languages with strict type-checking"
    ],
    "answer": 1
  },
  {
    "Id": 131,
    "question": "What is operator overloading?",
    "optionList": [
      "Creating new operators in a programming language",
      "Defining multiple operators with the same functionality",
      "Overriding the built-in operators to work with user-defined types",
      "Using operators beyond their standard functionality"
    ],
    "answer": 2
  },
  {
    "Id": 132,
    "question": "Which of the following operators can be overloaded in C++?",
    "optionList": [
      "&& (logical AND)",
      ":: (scope resolution)",
      "?: (ternary conditional)",
      "[] (subscripting)"
    ],
    "answer": 3
  },
  {
    "Id": 133,
    "question": "In C++, how is the operator+ overloaded for a user-defined class?",
    "optionList": [
      "Using the keyword \"overload\"",
      "Using the keyword \"operator\" followed by the operator symbol",
      "Using the keyword \"override\"",
      "Using the keyword \"friend\""
    ],
    "answer": 1
  },
  {
    "Id": 134,
    "question": "Can the assignment operator (=) be overloaded in C++?",
    "optionList": [
      "Yes",
      "No",
      "Only for built-in types",
      "Only in languages with automatic memory management"
    ],
    "answer": 0
  },
  {
    "Id": 135,
    "question": "What is function overriding?",
    "optionList": [
      "Redefining a function in the same class with different parameters",
      "Redefining a function in a derived class that is already defined in the base class",
      "Redefining a function to have a different return type",
      "Redefining a function to have a different access specifier"
    ],
    "answer": 1
  },
  {
    "Id": 136,
    "question": "In function overriding, the base class and derived class functions must have the same:",
    "optionList": [
      "Name",
      "Parameters",
      "Return type",
      "Access specifier"
    ],
    "answer": 0
  },
  {
    "Id": 137,
    "question": "Which keyword is used in C++ to indicate that a function is being overridden?",
    "optionList": [
      "virtual",
      "override",
      "base",
      "inherited"
    ],
    "answer": 1
  },
  {
    "Id": 138,
    "question": "Can constructors be overridden in Java?",
    "optionList": [
      "Yes",
      "No",
      "Only if they have the same name",
      "Only if they have the same parameters"
    ],
    "answer": 1
  },
  {
    "Id": 139,
    "question": "What is a virtual function?",
    "optionList": [
      "A function that cannot be overridden",
      "A function that can be overridden in derived classes",
      "A function that is automatically called upon object creation",
      "A function that is called statically"
    ],
    "answer": 1
  },
  {
    "Id": 140,
    "question": "Which programming language uses the keyword \"virtual\" to declare a virtual function?",
    "optionList": [
      "Java",
      "Python",
      "C++",
      "JavaScript"
    ],
    "answer": 2
  },
  {
    "Id": 141,
    "question": "In C++, how is a virtual function declared in the base class?",
    "optionList": [
      "Using the keyword \"base\"",
      "Using the keyword \"virtual\"",
      "Using the keyword \"override\"",
      "Using the keyword \"inherit\""
    ],
    "answer": 1
  },
  {
    "Id": 142,
    "question": "Can constructors and destructors be virtual in C++?",
    "optionList": [
      "Yes, both can be virtual",
      "Yes, only constructors can be virtual",
      "Yes, only destructors can be virtual",
      "No, neither can be virtual"
    ],
    "answer": 3
  },
  {
    "Id": 143,
    "question": "What is a pure virtual function?",
    "optionList": [
      "A function that has a pure mathematical definition",
      "A function that cannot be overridden",
      "A function that must be overridden in derived classes",
      "A function that returns no value"
    ],
    "answer": 2
  },
  {
    "Id": 144,
    "question": "Which of the following statements about abstract classes in C++ is true?",
    "optionList": [
      "An abstract class cannot have member functions.",
      "An abstract class cannot have member variables.",
      "An abstract class cannot be instantiated.",
      "An abstract class cannot have constructors."
    ],
    "answer": 2
  },
  {
    "Id": 145,
    "question": "In C++, how is a pure virtual function declared in a class?",
    "optionList": [
      "Using the keyword \"pure\"",
      "Using the keyword \"abstract\"",
      "Using the keyword \"virtual\" followed by \"= 0\"",
      "Using the keyword \"override\""
    ],
    "answer": 2
  },
  {
    "Id": 146,
    "question": "Can a class with pure virtual functions have non-virtual functions?",
    "optionList": [
      "Yes",
      "No",
      "Only if the non-virtual functions are private",
      "Only if the non-virtual functions are static"
    ],
    "answer": 0
  },
  {
    "Id": 147,
    "question": "What is dynamic polymorphism?",
    "optionList": [
      "Polymorphism that is resolved at compile time",
      "Polymorphism that is resolved at runtime",
      "Polymorphism that involves method overloading",
      "Polymorphism that involves operator overloading"
    ],
    "answer": 1
  },
  {
    "Id": 148,
    "question": "Which type of polymorphism is achieved through function overriding?",
    "optionList": [
      "Dynamic polymorphism",
      "Static polymorphism",
      "Compile-time polymorphism",
      "Method overloading"
    ],
    "answer": 0
  },
  {
    "Id": 149,
    "question": "In dynamic polymorphism, which function implementation is called at runtime?",
    "optionList": [
      "Base class function implementation",
      "Derived class function implementation",
      "Both base and derived class function implementations",
      "None of the above"
    ],
    "answer": 1
  },
  {
    "Id": 150,
    "question": "Which keyword is used in C++ to enable dynamic polymorphism?",
    "optionList": [
      "dynamic",
      "virtual",
      "override",
      "polymorphic"
    ],
    "answer": 1
  },
  {
    "Id": 151,
    "question": "What is static polymorphism?",
    "optionList": [
      "Polymorphism that is resolved at compile time",
      "Polymorphism that is resolved at runtime",
      "Polymorphism that involves method overloading",
      "Polymorphism that involves operator overloading"
    ],
    "answer": 0
  },
  {
    "Id": 152,
    "question": "Which type of polymorphism is achieved through method overloading?",
    "optionList": [
      "Dynamic polymorphism",
      "Static polymorphism",
      "Compile-time polymorphism",
      "Operator overloading"
    ],
    "answer": 2
  },
  {
    "Id": 153,
    "question": "In static polymorphism, which function implementation is determined at compile time?",
    "optionList": [
      "Base class function implementation",
      "Derived class function implementation",
      "Both base and derived class function implementations",
      "None of the above"
    ],
    "answer": 2
  },
  {
    "Id": 154,
    "question": "Which programming language primarily relies on static polymorphism?",
    "optionList": [
      "Java",
      "Python",
      "C++",
      "JavaScript"
    ],
    "answer": 2
  },
  {
    "Id": 155,
    "question": "In method overloading, which of the following statements is correct?",
    "optionList": [
      "Overloaded methods must have the same number of parameters.",
      "Overloaded methods must have the same parameter types.",
      "Overloaded methods must have the same return type.",
      "Overloaded methods must have the same access specifier."
    ],
    "answer": 1
  },
  {
    "Id": 156,
    "question": "Can method overloading be applied to static methods?",
    "optionList": [
      "Yes",
      "No",
      "Only in certain programming languages",
      "Only if the methods are declared as final"
    ],
    "answer": 0
  },
  {
    "Id": 157,
    "question": "Which of the following is an example of method overloading in Java?",
    "optionList": [
      "int add(int x, int y)",
      "double add(double x, double y)",
      "String add(String a, String b)",
      "All of the above"
    ],
    "answer": 3
  },
  {
    "Id": 158,
    "question": "What does operator overloading enable in C++?",
    "optionList": [
      "Defining new operators",
      "Redefining the behavior of existing operators",
      "Removing operators from a class",
      "Limiting the use of operators in a program"
    ],
    "answer": 1
  },
  {
    "Id": 159,
    "question": "Which of the following operators cannot be overloaded in C++?",
    "optionList": [
      "+",
      "?",
      "::",
      "%"
    ],
    "answer": 2
  },
  {
    "Id": 160,
    "question": "In C++, can the behavior of the assignment operator (=) be altered using operator overloading?",
    "optionList": [
      "Yes",
      "No",
      "Only if the assignment operator is declared as final",
      "Only in classes with virtual functions"
    ],
    "answer": 0
  },
  {
    "Id": 161,
    "question": "What happens if a derived class attempts to override a non-virtual function of the base class in C++?",
    "optionList": [
      "The compiler throws an error.",
      "The function in the derived class becomes virtual.",
      "The derived class function will not override the base class function.",
      "The behavior is undefined."
    ],
    "answer": 2
  },
  {
    "Id": 162,
    "question": "Which keyword is used in Java to prevent a method from being overridden in derived classes?",
    "optionList": [
      "final",
      "static",
      "override",
      "private"
    ],
    "answer": 0
  },
  {
    "Id": 163,
    "question": "Can the return type of an overriding function be different from the base class function in C++?",
    "optionList": [
      "Yes",
      "No",
      "Only if the return type is a pointer or reference type",
      "Only if the base class function is declared as virtual"
    ],
    "answer": 1
  },
  {
    "Id": 164,
    "question": "What is the purpose of declaring a function as virtual in C++?",
    "optionList": [
      "To make the function accessible from any class",
      "To allow the function to be overloaded",
      "To enable dynamic polymorphism through function overriding",
      "To restrict the function's access within the class hierarchy"
    ],
    "answer": 2
  },
  {
    "Id": 165,
    "question": "In C++, can a virtual function have a default argument?",
    "optionList": [
      "Yes",
      "No",
      "Only if the default argument is of a fundamental type",
      "Only if the default argument is provided in the derived class"
    ],
    "answer": 0
  },
  {
    "Id": 166,
    "question": "Which of the following statements about virtual functions in C++ is true?",
    "optionList": [
      "Virtual functions cannot have a function body.",
      "Virtual functions must be defined in the base class.",
      "Virtual functions cannot be overloaded.",
      "Virtual functions must have the same access specifier in the derived class."
    ],
    "answer": 1
  },
  {
    "Id": 167,
    "question": "In C++, can an abstract class have constructors?",
    "optionList": [
      "Yes",
      "No",
      "Only if the constructors are declared as virtual",
      "Only if the constructors are defined in the derived class"
    ],
    "answer": 0
  },
  {
    "Id": 168,
    "question": "What is the significance of declaring a function as pure virtual in C++?",
    "optionList": [
      "It indicates that the function does not have a definition.",
      "It indicates that the function cannot be called.",
      "It indicates that the function must be overridden in derived classes.",
      "It indicates that the function is static."
    ],
    "answer": 2
  },
  {
    "Id": 169,
    "question": "In C++, can a pure virtual function have a function body?",
    "optionList": [
      "Yes",
      "No",
      "Only if the function body is defined in the derived class",
      "Only if the pure virtual function is declared as final"
    ],
    "answer": 1
  },
  {
    "Id": 170,
    "question": "What is the primary mechanism for achieving dynamic polymorphism in C++?",
    "optionList": [
      "Function overloading",
      "Operator overloading",
      "Inheritance and virtual functions",
      "Template metaprogramming"
    ],
    "answer": 2
  },
  {
    "Id": 171,
    "question": "In C++, when is the function to be invoked determined in the case of dynamic polymorphism?",
    "optionList": [
      "At compile time",
      "At runtime",
      "During preprocessing",
      "During linking"
    ],
    "answer": 1
  },
  {
    "Id": 172,
    "question": "Which of the following statements is true regarding dynamic polymorphism?",
    "optionList": [
      "It is achieved through function overloading.",
      "It is resolved at compile time.",
      "It requires virtual functions and inheritance.",
      "It is primarily used for operator overloading."
    ],
    "answer": 2
  },
  {
    "Id": 173,
    "question": "Which programming paradigm primarily utilizes static polymorphism?",
    "optionList": [
      "Object-oriented programming",
      "Procedural programming",
      "Functional programming",
      "Generic programming"
    ],
    "answer": 3
  },
  {
    "Id": 174,
    "question": "In C++, how is static polymorphism achieved?",
    "optionList": [
      "Through inheritance and virtual functions",
      "Through function overloading and operator overloading",
      "Through dynamic binding",
      "Through pure virtual functions"
    ],
    "answer": 1
  },
  {
    "Id": 175,
    "question": "Which of the following statements about static polymorphism is true?",
    "optionList": [
      "It is also known as late binding.",
      "It requires the use of the \"virtual\" keyword.",
      "It is resolved at compile time.",
      "It is primarily used for dynamic memory allocation."
    ],
    "answer": 2
  },
  {
    "Id": 176,
    "question": "Which of the following is an advantage of method overloading?",
    "optionList": [
      "It increases code readability.",
      "It reduces code duplication.",
      "It allows for better error handling.",
      "It simplifies the inheritance hierarchy."
    ],
    "answer": 0
  },
  {
    "Id": 177,
    "question": "In method overloading, which of the following must be different for overloaded methods?",
    "optionList": [
      "Method name",
      "Return type",
      "Access modifier",
      "Parameters"
    ],
    "answer": 3
  },
  {
    "Id": 178,
    "question": "Can the parameters of overloaded methods differ only by their return type?",
    "optionList": [
      "Yes",
      "No",
      "Only in certain programming languages",
      "Only if one of the parameters is of a pointer type"
    ],
    "answer": 1
  },
  {
    "Id": 179,
    "question": "In C++, which operator overloading method is used to overload the unary increment operator (++) for a user-defined class?",
    "optionList": [
      "operator++",
      "operator+",
      "operator+=",
      "operator<<"
    ],
    "answer": 0
  },
  {
    "Id": 180,
    "question": "Can the behavior of the logical AND operator (&&) be modified using operator overloading in C++?",
    "optionList": [
      "Yes",
      "No",
      "Only if the operator is declared as virtual",
      "Only if the operator is declared as static"
    ],
    "answer": 1
  },
  {
    "Id": 181,
    "question": "Which of the following statements about function overriding is correct?",
    "optionList": [
      "Overriding is not supported in languages without classes.",
      "Overriding can only be performed on public methods.",
      "Overriding allows a derived class to provide a specific implementation of a function already defined in the base class.",
      "Overriding can only be done in the base class."
    ],
    "answer": 2
  },
  {
    "Id": 182,
    "question": "Can a derived class override a private method of the base class in C++?",
    "optionList": [
      "Yes",
      "No",
      "Only if the base class method is declared as static",
      "Only if the base class method is declared as final"
    ],
    "answer": 1
  },
  {
    "Id": 183,
    "question": "In Java, can a method be overridden to throw a broader checked exception?",
    "optionList": [
      "Yes",
      "No",
      "Only if the overridden method is declared as final",
      "Only if the overridden method is declared as abstract"
    ],
    "answer": 1
  },
  {
    "Id": 184,
    "question": "Which of the following is true about virtual functions?",
    "optionList": [
      "Virtual functions are resolved at compile-time.",
      "Virtual functions allow static binding.",
      "Virtual functions can be overridden in derived classes.",
      "Virtual functions are not supported in C++."
    ],
    "answer": 2
  },
  {
    "Id": 185,
    "question": "In C++, can a virtual function be defined outside of the class?",
    "optionList": [
      "Yes",
      "No",
      "Only if the virtual function is declared as final",
      "Only if the virtual function is declared as pure virtual"
    ],
    "answer": 0
  },
  {
    "Id": 186,
    "question": "In C++, can a derived class have a different access specifier for an overridden virtual function?",
    "optionList": [
      "Yes",
      "No",
      "Only if the base class function is declared as static",
      "Only if the base class function is declared as final"
    ],
    "answer": 0
  },
  {
    "Id": 187,
    "question": "Which of the following statements about pure virtual functions is true?",
    "optionList": [
      "Pure virtual functions must have a function body.",
      "Pure virtual functions can be instantiated.",
      "Classes containing pure virtual functions cannot be instantiated.",
      "Pure virtual functions cannot be overridden in derived classes."
    ],
    "answer": 2
  },
  {
    "Id": 188,
    "question": "In C++, can a pure virtual function have a default implementation?",
    "optionList": [
      "Yes",
      "No",
      "Only if the pure virtual function is declared as final",
      "Only if the pure virtual function is declared as protected"
    ],
    "answer": 1
  },
  {
    "Id": 189,
    "question": "Which of the following is a characteristic of dynamic polymorphism?",
    "optionList": [
      "It is resolved at compile-time.",
      "It requires the use of function overloading.",
      "It involves late binding.",
      "It is primarily achieved through method hiding."
    ],
    "answer": 2
  },
  {
    "Id": 190,
    "question": "In C++, which keyword is used to implement dynamic polymorphism?",
    "optionList": [
      "dynamic",
      "polymorphic",
      "virtual",
      "override"
    ],
    "answer": 2
  },
  {
    "Id": 191,
    "question": "In C++, can a function be both virtual and pure virtual?",
    "optionList": [
      "Yes",
      "No",
      "Only if the function is declared as final",
      "Only if the function is declared as static"
    ],
    "answer": 0
  },
  {
    "Id": 192,
    "question": "In C++, can static polymorphism be achieved through operator overloading?",
    "optionList": [
      "Yes",
      "No",
      "Only if the operator is declared as virtual",
      "Only if the operator is declared as static"
    ],
    "answer": 0
  },
  {
    "Id": 193,
    "question": "Can method overloading be applied to constructors in Java?",
    "optionList": [
      "Yes",
      "No",
      "Only if the constructors have different access modifiers",
      "Only if the constructors have the same parameter types"
    ],
    "answer": 0
  },
  {
    "Id": 194,
    "question": "Which of the following is true about the scope of overloaded methods in Java?",
    "optionList": [
      "Overloaded methods must have the same scope.",
      "Overloaded methods can have different scopes.",
      "Overloaded methods cannot have a scope.",
      "Overloaded methods are always private."
    ],
    "answer": 1
  },
  {
    "Id": 195,
    "question": "In C++, which operator overloading method is used to overload the unary decrement operator (--) for a user-defined class?",
    "optionList": [
      "operator-",
      "operator--",
      "operator--",
      "operator-"
    ],
    "answer": 1
  },
  {
    "Id": 196,
    "question": "Which of the following operators cannot be overloaded through a member function in C++?",
    "optionList": [
      "&&",
      "||",
      ",",
      "?"
    ],
    "answer": 2
  },
  {
    "Id": 197,
    "question": "In Java, can a subclass override a method from a superclass if it has a different return type?",
    "optionList": [
      "Yes",
      "No",
      "Only if the return types are compatible",
      "Only if the superclass method is declared as final"
    ],
    "answer": 1
  },
  {
    "Id": 198,
    "question": "In C++, can a derived class override a non-virtual function from a base class?",
    "optionList": [
      "Yes",
      "No",
      "Only if the base class function is declared as static",
      "Only if the base class function is declared as final"
    ],
    "answer": 0
  },
  {
    "Id": 199,
    "question": "In C++, can a virtual function be declared as static?",
    "optionList": [
      "Yes",
      "No",
      "Only if the virtual function is declared as final",
      "Only if the virtual function is declared as pure virtual"
    ],
    "answer": 1
  },
  {
    "Id": 200,
    "question": "Can a class with pure virtual functions have non-pure virtual functions?",
    "optionList": [
      "Yes",
      "No",
      "Only if the class is declared as final",
      "Only if the class is declared as abstract"
    ],
    "answer": 0
  },
  {
    "Id": 201,
    "question": "Which of the following is true about abstract classes in C++?",
    "optionList": [
      "Abstract classes cannot have constructors.",
      "Abstract classes can have both pure virtual and non-pure virtual functions.",
      "Abstract classes cannot be used as base classes.",
      "Abstract classes cannot have member variables."
    ],
    "answer": 1
  },
  {
    "Id": 202,
    "question": "Which type of binding is associated with dynamic polymorphism?",
    "optionList": [
      "Early binding",
      "Late binding",
      "Static binding",
      "Compile-time binding"
    ],
    "answer": 1
  },
  {
    "Id": 203,
    "question": "In C++, can a class have virtual constructors?",
    "optionList": [
      "Yes",
      "No",
      "Only if the class is declared as abstract",
      "Only if the class is declared as final"
    ],
    "answer": 1
  },
  {
    "Id": 204,
    "question": "Which of the following is an example of static polymorphism?",
    "optionList": [
      "Method overriding",
      "Function templates",
      "Virtual function calls",
      "Operator overloading"
    ],
    "answer": 1
  },
  {
    "Id": 205,
    "question": "In C++, can static polymorphism be achieved through function pointers?",
    "optionList": [
      "Yes",
      "No",
      "Only if the functions are declared as virtual",
      "Only if the functions are declared as static"
    ],
    "answer": 0
  },
  {
    "Id": 206,
    "question": "Can method overloading be applied to static methods in Java?",
    "optionList": [
      "Yes",
      "No",
      "Only if the methods have different return types",
      "Only if the methods are declared as final"
    ],
    "answer": 0
  },
  {
    "Id": 207,
    "question": "In method overloading, what happens if two methods have the same name and parameters but different return types?",
    "optionList": [
      "It is allowed.",
      "It leads to a compilation error.",
      "It results in a runtime error.",
      "It automatically promotes the return type."
    ],
    "answer": 1
  },
  {
    "Id": 208,
    "question": "Which of the following operators cannot be overloaded through a friend function in C++?",
    "optionList": [
      "+",
      "/",
      "=",
      "[]"
    ],
    "answer": 2
  },
  {
    "Id": 209,
    "question": "In C++, which operator overloading method is used to overload the subscript operator ([]) for a user-defined class?",
    "optionList": [
      "operator[]",
      "operator()",
      "operator+",
      "operator*"
    ],
    "answer": 0
  },
  {
    "Id": 210,
    "question": "Can a derived class override a virtual function in a base class and define a new virtual function with the same name and parameters?",
    "optionList": [
      "Yes",
      "No",
      "Only if the base class function is declared as final",
      "Only if the base class function is declared as static"
    ],
    "answer": 0
  },
  {
    "Id": 211,
    "question": "In Java, can a subclass override a private method from its superclass?",
    "optionList": [
      "Yes",
      "No",
      "Only if the private method is declared as final",
      "Only if the private method is declared as static"
    ],
    "answer": 1
  },
  {
    "Id": 212,
    "question": "In C++, can a virtual function be declared as const?",
    "optionList": [
      "Yes",
      "No",
      "Only if the virtual function is declared as final",
      "Only if the virtual function is declared as pure virtual"
    ],
    "answer": 0
  },
  {
    "Id": 213,
    "question": "Which of the following statements about virtual functions in C++ is correct?",
    "optionList": [
      "Virtual functions cannot have default arguments.",
      "Virtual functions cannot be declared as static.",
      "Virtual functions must be defined in the derived class.",
      "Virtual functions can only be accessed through the base class pointer."
    ],
    "answer": 1
  },
  {
    "Id": 214,
    "question": "In C++, can an abstract class have a constructor?",
    "optionList": [
      "Yes",
      "No",
      "Only if the constructor is declared as pure virtual",
      "Only if the constructor is declared as static"
    ],
    "answer": 0
  },
  {
    "Id": 215,
    "question": "In C++, can a derived class have its own virtual function with the same name as the one in the base class?",
    "optionList": [
      "Yes",
      "No",
      "Only if the derived class function is declared as static",
      "Only if the derived class function is declared as final"
    ],
    "answer": 0
  },
  {
    "Id": 216,
    "question": "In dynamic polymorphism, when is the function to be invoked determined?",
    "optionList": [
      "At compile-time",
      "At runtime",
      "During preprocessing",
      "During linking"
    ],
    "answer": 1
  },
  {
    "Id": 217,
    "question": "In C++, can static polymorphism be achieved through function overloading?",
    "optionList": [
      "Yes",
      "No",
      "Only if the functions are declared as virtual",
      "Only if the functions are declared as static"
    ],
    "answer": 0
  },
  {
    "Id": 218,
    "question": "Which of the following is true about operator overloading in C++?",
    "optionList": [
      "It allows the creation of new operators.",
      "It can only be done using member functions.",
      "It is limited to arithmetic operators.",
      "It cannot be applied to built-in operators."
    ],
    "answer": 0
  },
  {
    "Id": 219,
    "question": "In C++, can a virtual function be declared as noexcept?",
    "optionList": [
      "Yes",
      "No",
      "Only if the virtual function is declared as final",
      "Only if the virtual function is declared as pure virtual"
    ],
    "answer": 0
  },
  {
    "Id": 220,
    "question": "In dynamic polymorphism, can a subclass add additional parameters to an overridden method compared to the superclass method?",
    "optionList": [
      "Yes",
      "No",
      "Only if the superclass method is declared as final",
      "Only if the superclass method is declared as static"
    ],
    "answer": 1
  },
  {
    "Id": 221,
    "question": "What is an abstract class?",
    "optionList": [
      "A class that cannot be instantiated",
      "A class that contains only abstract methods",
      "A class that cannot have member variables",
      "A class that can only be accessed by subclasses"
    ],
    "answer": 0
  },
  {
    "Id": 222,
    "question": "Which keyword is used to declare an abstract class in Java?",
    "optionList": [
      "abstract",
      "class",
      "interface",
      "virtual"
    ],
    "answer": 0
  },
  {
    "Id": 223,
    "question": "Can an abstract class have non-abstract (concrete) methods?",
    "optionList": [
      "Yes",
      "No",
      "Only if the methods are declared as private",
      "Only if the methods are declared as static"
    ],
    "answer": 0
  },
  {
    "Id": 224,
    "question": "What happens if a non-abstract class inherits from an abstract class without implementing all its abstract methods?",
    "optionList": [
      "Compilation error",
      "Runtime error",
      "Warning message",
      "No error, but the subclass cannot be instantiated"
    ],
    "answer": 0
  },
  {
    "Id": 225,
    "question": "In C++, how is a pure virtual function declared?",
    "optionList": [
      "Using the keyword \"pure\"",
      "Using the keyword \"abstract\"",
      "Using the keyword \"virtual\" followed by \"= 0\"",
      "Using the keyword \"override\""
    ],
    "answer": 2
  },
  {
    "Id": 226,
    "question": "Can a class with pure virtual functions be instantiated?",
    "optionList": [
      "Yes",
      "No",
      "Only if the pure virtual functions have default implementations",
      "Only if the class is declared as abstract"
    ],
    "answer": 1
  },
  {
    "Id": 227,
    "question": "What is an interface?",
    "optionList": [
      "A class that cannot be instantiated",
      "A class that contains only private methods",
      "A collection of abstract methods with no implementation",
      "A class that cannot have member variables"
    ],
    "answer": 2
  },
  {
    "Id": 228,
    "question": "Which programming language does not support interfaces?",
    "optionList": [
      "Java",
      "C++",
      "Python",
      "C#"
    ],
    "answer": 1
  },
  {
    "Id": 229,
    "question": "Can a class implement multiple interfaces in Java?",
    "optionList": [
      "Yes",
      "No",
      "Only if the interfaces have default implementations",
      "Only if the interfaces have the same method names"
    ],
    "answer": 0
  },
  {
    "Id": 230,
    "question": "In C#, how are interfaces declared?",
    "optionList": [
      "Using the keyword \"interface\"",
      "Using the keyword \"abstract\"",
      "Using the keyword \"implements\"",
      "Using the keyword \"interface\" followed by \"class\""
    ],
    "answer": 0
  },
  {
    "Id": 231,
    "question": "What is an Abstract Data Type (ADT)?",
    "optionList": [
      "A data type that is declared using the \"abstract\" keyword",
      "A data type that is not specific to any programming language",
      "A data type that is defined by its behavior and operations, not its implementation",
      "A data type that cannot be instantiated"
    ],
    "answer": 2
  },
  {
    "Id": 232,
    "question": "Which of the following is an example of an ADT?",
    "optionList": [
      "Integer",
      "Array",
      "Float",
      "String"
    ],
    "answer": 1
  },
  {
    "Id": 233,
    "question": "In which phase of software development are ADTs typically defined?",
    "optionList": [
      "Design phase",
      "Implementation phase",
      "Testing phase",
      "Maintenance phase"
    ],
    "answer": 0
  },
  {
    "Id": 234,
    "question": "Which of the following operations is commonly associated with ADTs?",
    "optionList": [
      "Sorting",
      "Looping",
      "Indexing",
      "Casting"
    ],
    "answer": 2
  },
  {
    "Id": 235,
    "question": "Can an abstract class have constructors?",
    "optionList": [
      "Yes",
      "No",
      "Only if the constructors are declared as abstract",
      "Only if the constructors are declared as private"
    ],
    "answer": 0
  },
  {
    "Id": 236,
    "question": "Which of the following statements about abstract classes is true?",
    "optionList": [
      "Abstract classes can be instantiated directly.",
      "Abstract classes can only contain abstract methods.",
      "Abstract classes cannot have any concrete methods.",
      "Abstract classes cannot have constructors."
    ],
    "answer": 3
  },
  {
    "Id": 237,
    "question": "In Java, can an abstract class extend another abstract class?",
    "optionList": [
      "Yes",
      "No",
      "Only if both classes have the same number of abstract methods",
      "Only if both classes have the same access modifiers"
    ],
    "answer": 0
  },
  {
    "Id": 238,
    "question": "What is the purpose of declaring a class as abstract?",
    "optionList": [
      "To prevent it from being inherited",
      "To prevent it from being instantiated",
      "To restrict access to its methods",
      "To limit the number of methods it can contain"
    ],
    "answer": 1
  },
  {
    "Id": 239,
    "question": "Can a class have both pure virtual functions and concrete methods?",
    "optionList": [
      "Yes",
      "No",
      "Only if the pure virtual functions are declared as private",
      "Only if the concrete methods are declared as static"
    ],
    "answer": 0
  },
  {
    "Id": 240,
    "question": "In C++, can a pure virtual function have a default argument?",
    "optionList": [
      "Yes",
      "No",
      "Only if the default argument is of a fundamental type",
      "Only if the default argument is provided in the derived class"
    ],
    "answer": 0
  },
  {
    "Id": 241,
    "question": "What happens if a derived class does not implement all the pure virtual functions of its base class?",
    "optionList": [
      "Compilation error",
      "Runtime error",
      "Warning message",
      "No error, but the derived class cannot be instantiated"
    ],
    "answer": 0
  },
  {
    "Id": 242,
    "question": "In Java, can an interface have member variables?",
    "optionList": [
      "Yes",
      "No",
      "Only if the member variables are declared as final",
      "Only if the member variables are declared as static"
    ],
    "answer": 1
  },
  {
    "Id": 243,
    "question": "Which of the following statements about interfaces is true?",
    "optionList": [
      "Interfaces can have constructors.",
      "Interfaces can contain implementation details.",
      "A class can implement multiple interfaces with conflicting method signatures.",
      "Interfaces can be instantiated directly."
    ],
    "answer": 2
  },
  {
    "Id": 244,
    "question": "Can an interface extend another interface in Java?",
    "optionList": [
      "Yes",
      "No",
      "Only if both interfaces have the same access modifiers",
      "Only if both interfaces have the same number of methods"
    ],
    "answer": 0
  },
  {
    "Id": 245,
    "question": "What is the primary purpose of interfaces?",
    "optionList": [
      "To define the structure of a class",
      "To provide a blueprint for objects",
      "To restrict access to class members",
      "To enforce encapsulation"
    ],
    "answer": 1
  },
  {
    "Id": 246,
    "question": "Which of the following is a characteristic of abstract data types?",
    "optionList": [
      "They focus on the implementation details.",
      "They can only represent primitive data types.",
      "They encapsulate data and operations into a single unit.",
      "They are specific to a particular programming language."
    ],
    "answer": 2
  },
  {
    "Id": 247,
    "question": "In object-oriented programming, ADTs are often implemented using:",
    "optionList": [
      "Classes",
      "Functions",
      "Structures",
      "Pointers"
    ],
    "answer": 0
  },
  {
    "Id": 248,
    "question": "Which of the following operations is typically associated with ADTs?",
    "optionList": [
      "Memory allocation",
      "Disk I/O",
      "Exception handling",
      "Data retrieval"
    ],
    "answer": 3
  },
  {
    "Id": 249,
    "question": "Which phase of software development involves the design and definition of ADTs?",
    "optionList": [
      "Implementation",
      "Testing",
      "Maintenance",
      "Design"
    ],
    "answer": 3
  },
  {
    "Id": 250,
    "question": "Which of the following is a valid statement regarding abstract classes?",
    "optionList": [
      "Abstract classes can be instantiated directly.",
      "Abstract classes can be declared as final.",
      "Abstract classes cannot have static methods.",
      "Abstract classes cannot have constructors."
    ],
    "answer": 1
  },
  {
    "Id": 251,
    "question": "In C++, can a class inherit from multiple abstract classes?",
    "optionList": [
      "Yes",
      "No",
      "Only if the abstract classes have the same number of pure virtual functions",
      "Only if the abstract classes have the same access specifiers"
    ],
    "answer": 0
  },
  {
    "Id": 252,
    "question": "Can a non-abstract class inherit from an abstract class without implementing its abstract methods?",
    "optionList": [
      "Yes",
      "No",
      "Only if the abstract methods have default implementations",
      "Only if the abstract class is declared as final"
    ],
    "answer": 1
  },
  {
    "Id": 253,
    "question": "What is the purpose of making a method in an abstract class private?",
    "optionList": [
      "To restrict access to the method.",
      "To make it impossible for derived classes to override the method.",
      "To prevent derived classes from calling the method.",
      "To enforce encapsulation."
    ],
    "answer": 1
  },
  {
    "Id": 254,
    "question": "Which of the following statements about pure virtual functions is false?",
    "optionList": [
      "Pure virtual functions must be overridden in derived classes.",
      "Pure virtual functions can have default implementations.",
      "Pure virtual functions are declared using the \"= 0\" syntax in C++.",
      "Pure virtual functions cannot have a function body."
    ],
    "answer": 1
  },
  {
    "Id": 255,
    "question": "In C++, can a class have a mixture of pure virtual functions and concrete methods?",
    "optionList": [
      "Yes",
      "No",
      "Only if the concrete methods are declared as final",
      "Only if the pure virtual functions have default implementations"
    ],
    "answer": 0
  },
  {
    "Id": 256,
    "question": "Can a class override a pure virtual function and still have it as pure virtual?",
    "optionList": [
      "Yes",
      "No",
      "Only if the class is declared as abstract",
      "Only if the class is declared as final"
    ],
    "answer": 1
  },
  {
    "Id": 257,
    "question": "In C#, can a method in an interface have access modifiers?",
    "optionList": [
      "Yes",
      "No",
      "Only if the method is declared as static",
      "Only if the method is declared as final"
    ],
    "answer": 1
  },
  {
    "Id": 258,
    "question": "Can an interface have static methods in Java?",
    "optionList": [
      "Yes",
      "No",
      "Only if the static methods are declared as final",
      "Only if the static methods are declared as private"
    ],
    "answer": 0
  },
  {
    "Id": 259,
    "question": "In Java, can an interface extend another interface?",
    "optionList": [
      "Yes",
      "No",
      "Only if both interfaces have the same number of methods",
      "Only if both interfaces have the same access modifiers"
    ],
    "answer": 0
  },
  {
    "Id": 260,
    "question": "Which of the following is true about abstract data types?",
    "optionList": [
      "ADTs focus on implementation details rather than behavior.",
      "ADTs are specific to a particular programming language.",
      "ADTs can only represent primitive data types.",
      "ADTs encapsulate data and operations into a single unit."
    ],
    "answer": 3
  },
  {
    "Id": 261,
    "question": "Which of the following is not an example of an ADT?",
    "optionList": [
      "Stack",
      "Queue",
      "Integer",
      "Linked List"
    ],
    "answer": 2
  },
  {
    "Id": 262,
    "question": "What is the primary goal of using ADTs?",
    "optionList": [
      "To provide low-level data structures.",
      "To improve code organization and modularity.",
      "To optimize memory usage.",
      "To enforce strict typing in programming languages."
    ],
    "answer": 1
  },
  {
    "Id": 263,
    "question": "Which phase of software development involves the implementation of ADTs?",
    "optionList": [
      "Design",
      "Testing",
      "Maintenance",
      "Implementation"
    ],
    "answer": 3
  },
  {
    "Id": 264,
    "question": "Can an abstract class have a destructor?",
    "optionList": [
      "Yes",
      "No",
      "Only if the destructor is declared as virtual",
      "Only if the destructor is declared as private"
    ],
    "answer": 0
  },
  {
    "Id": 265,
    "question": "Which of the following is a valid use case for an abstract class?",
    "optionList": [
      "Implementing fully functional methods",
      "Providing a blueprint for objects without defining their behavior",
      "Instantiating objects directly from the abstract class",
      "Declaring member variables without methods"
    ],
    "answer": 1
  },
  {
    "Id": 266,
    "question": "In C++, can a derived class have its own implementation of a method from the abstract base class?",
    "optionList": [
      "Yes",
      "No",
      "Only if the method is declared as static",
      "Only if the method is declared as final"
    ],
    "answer": 0
  },
  {
    "Id": 267,
    "question": "In C++, can a class with a pure virtual function be instantiated?",
    "optionList": [
      "Yes",
      "No",
      "Only if the pure virtual function has a default implementation",
      "Only if the class is declared as abstract"
    ],
    "answer": 1
  },
  {
    "Id": 268,
    "question": "In C#, can a class implement multiple interfaces with conflicting method signatures?",
    "optionList": [
      "Yes",
      "No",
      "Only if the class is declared as abstract",
      "Only if the class is declared as final"
    ],
    "answer": 0
  },
  {
    "Id": 269,
    "question": "Which of the following is true about interfaces in Java?",
    "optionList": [
      "Interfaces can only declare constants.",
      "Interfaces can have method implementations.",
      "Interfaces cannot extend other interfaces.",
      "Interfaces can only be implemented by abstract classes."
    ],
    "answer": 0
  },
  {
    "Id": 270,
    "question": "Which of the following is not an example of an abstract data type?",
    "optionList": [
      "Set",
      "Dictionary",
      "Integer",
      "Graph"
    ],
    "answer": 2
  },
  {
    "Id": 271,
    "question": "What is the primary purpose of an abstract data type?",
    "optionList": [
      "To provide low-level data structures",
      "To enforce encapsulation",
      "To define a set of operations on data",
      "To optimize memory usage"
    ],
    "answer": 2
  },
  {
    "Id": 272,
    "question": "Which of the following operations is typically associated with abstract data types?",
    "optionList": [
      "Looping",
      "Sorting",
      "Memory allocation",
      "Exception handling"
    ],
    "answer": 1
  },
  {
    "Id": 273,
    "question": "In which phase of software development are abstract data types most commonly defined?",
    "optionList": [
      "Design",
      "Implementation",
      "Testing",
      "Maintenance"
    ],
    "answer": 0
  },
  {
    "Id": 274,
    "question": "What is the primary goal of abstraction in software engineering?",
    "optionList": [
      "To hide implementation details",
      "To increase the complexity of code",
      "To reduce code reusability",
      "To make code less modular"
    ],
    "answer": 0
  },
  {
    "Id": 275,
    "question": "Which of the following best describes abstraction?",
    "optionList": [
      "Hiding complexity by providing simple interfaces",
      "Exposing all implementation details",
      "Increasing the coupling between different components",
      "Making code less maintainable"
    ],
    "answer": 0
  },
  {
    "Id": 276,
    "question": "In object-oriented programming, what is the benefit of abstraction?",
    "optionList": [
      "It allows for the creation of complex data structures.",
      "It simplifies the interaction between different components.",
      "It reduces the need for encapsulation.",
      "It increases the number of dependencies between classes."
    ],
    "answer": 1
  },
  {
    "Id": 277,
    "question": "Which of the following is an example of abstraction in everyday life?",
    "optionList": [
      "Driving a car without knowing how the engine works",
      "Building a computer from scratch",
      "Writing assembly language code",
      "Designing a complex algorithm"
    ],
    "answer": 0
  },
  {
    "Id": 278,
    "question": "Can an abstract class have a default constructor?",
    "optionList": [
      "Yes",
      "No",
      "Only if it's explicitly declared as private",
      "Only if it's explicitly declared as public"
    ],
    "answer": 0
  },
  {
    "Id": 279,
    "question": "In C++, can an abstract class have a member function with a function body?",
    "optionList": [
      "Yes",
      "No",
      "Only if the member function is declared as static",
      "Only if the member function is declared as virtual"
    ],
    "answer": 0
  },
  {
    "Id": 280,
    "question": "Can an abstract class be a subclass of another abstract class?",
    "optionList": [
      "Yes",
      "No",
      "Only if both classes have the same number of pure virtual functions",
      "Only if both classes have the same access specifiers"
    ],
    "answer": 0
  },
  {
    "Id": 281,
    "question": "In C++, can a pure virtual function be declared as const?",
    "optionList": [
      "Yes",
      "No",
      "Only if it's explicitly declared as virtual",
      "Only if it's explicitly declared as static"
    ],
    "answer": 0
  },
  {
    "Id": 282,
    "question": "Can a class inherit from multiple abstract classes?",
    "optionList": [
      "Yes",
      "No",
      "Only if all abstract classes have the same method signatures",
      "Only if all abstract classes are declared as final"
    ],
    "answer": 1
  },
  {
    "Id": 283,
    "question": "What is the significance of making a method in an abstract class private?",
    "optionList": [
      "It prevents it from being overridden in derived classes.",
      "It allows only the abstract class to access the method.",
      "It makes the method abstract.",
      "It restricts access to the method within the same class."
    ],
    "answer": 0
  },
  {
    "Id": 284,
    "question": "In C++, can a derived class have its own implementation of a pure virtual function?",
    "optionList": [
      "Yes",
      "No",
      "Only if the pure virtual function is declared as static",
      "Only if the pure virtual function is declared as final"
    ],
    "answer": 0
  },
  {
    "Id": 285,
    "question": "Can a class with only pure virtual functions be instantiated?",
    "optionList": [
      "Yes",
      "No",
      "Only if all pure virtual functions have default implementations",
      "Only if the class is declared as final"
    ],
    "answer": 1
  },
  {
    "Id": 286,
    "question": "Can an interface in Java have fields?",
    "optionList": [
      "Yes",
      "No",
      "Only if the fields are declared as final",
      "Only if the fields are declared as static"
    ],
    "answer": 1
  },
  {
    "Id": 287,
    "question": "In C#, can an interface inherit from another interface?",
    "optionList": [
      "Yes",
      "No",
      "Only if both interfaces have the same number of methods",
      "Only if both interfaces have the same access modifiers"
    ],
    "answer": 0
  },
  {
    "Id": 288,
    "question": "Can an interface extend a class in Java?",
    "optionList": [
      "Yes",
      "No",
      "Only if the class is declared as abstract",
      "Only if the class is declared as final"
    ],
    "answer": 1
  },
  {
    "Id": 289,
    "question": "What is the primary advantage of using abstract data types?",
    "optionList": [
      "Improved memory management",
      "Better code readability",
      "Increased code complexity",
      "Encapsulation of data and operations"
    ],
    "answer": 3
  },
  {
    "Id": 290,
    "question": "Which of the following is an example of an abstract data type?",
    "optionList": [
      "Integer",
      "Float",
      "Stack",
      "Array"
    ],
    "answer": 2
  },
  {
    "Id": 291,
    "question": "What role do abstract data types play in software development?",
    "optionList": [
      "They define the structure of a program.",
      "They provide a blueprint for objects.",
      "They encapsulate data and operations into a single unit.",
      "They optimize code execution."
    ],
    "answer": 2
  },
  {
    "Id": 292,
    "question": "In which phase of the software development life cycle are abstract data types typically designed?",
    "optionList": [
      "Design",
      "Implementation",
      "Testing",
      "Maintenance"
    ],
    "answer": 0
  },
  {
    "Id": 293,
    "question": "What is the primary purpose of abstraction in object-oriented programming?",
    "optionList": [
      "To hide implementation details",
      "To increase code complexity",
      "To decrease code modularity",
      "To limit code reusability"
    ],
    "answer": 0
  },
  {
    "Id": 294,
    "question": "In software engineering, what is the benefit of abstraction?",
    "optionList": [
      "It allows for easier debugging.",
      "It simplifies code maintenance.",
      "It increases code redundancy.",
      "It decreases code readability."
    ],
    "answer": 1
  },
  {
    "Id": 295,
    "question": "What does a \"Has-A\" relationship signify in object-oriented programming?",
    "optionList": [
      "Inheritance relationship",
      "Composition relationship",
      "Aggregation relationship",
      "Association relationship"
    ],
    "answer": 3
  },
  {
    "Id": 296,
    "question": "In a Has-A relationship, what does an object possess?",
    "optionList": [
      "Another object",
      "A subclass",
      "An interface",
      "A superclass"
    ],
    "answer": 0
  },
  {
    "Id": 297,
    "question": "Which of the following examples demonstrates a Has-A relationship?",
    "optionList": [
      "A car has wheels",
      "A dog inherits from an animal",
      "A student is a person",
      "A tree has branches"
    ],
    "answer": 0
  },
  {
    "Id": 298,
    "question": "In a Has-A relationship, how are the associated objects typically accessed?",
    "optionList": [
      "Through inheritance",
      "Through composition",
      "Through aggregation",
      "Through member functions"
    ],
    "answer": 3
  },
  {
    "Id": 299,
    "question": "What is the primary difference between composition and inheritance?",
    "optionList": [
      "Composition allows for code reuse, while inheritance allows for better encapsulation.",
      "Composition allows for better encapsulation, while inheritance allows for code reuse.",
      "Composition involves creating new objects within another object, while inheritance involves acquiring properties and behaviors from a superclass.",
      "Composition involves acquiring properties and behaviors from a superclass, while inheritance involves creating new objects within another object."
    ],
    "answer": 2
  },
  {
    "Id": 300,
    "question": "Which of the following statements best describes composition?",
    "optionList": [
      "It allows a class to inherit from multiple classes.",
      "It involves creating objects within another object.",
      "It allows for the modification of inherited properties and behaviors.",
      "It is a \"is-a\" relationship between classes."
    ],
    "answer": 1
  },
  {
    "Id": 301,
    "question": "In composition, how are the lifetimes of the objects typically managed?",
    "optionList": [
      "The objects share the same lifetime.",
      "The objects have independent lifetimes.",
      "The lifetime of the container object depends on the lifetime of the contained object.",
      "The lifetime of the contained object depends on the lifetime of the container object."
    ],
    "answer": 0
  },
  {
    "Id": 302,
    "question": "Which of the following is an advantage of composition over inheritance?",
    "optionList": [
      "Composition promotes code reuse.",
      "Composition allows for easy modification of behavior.",
      "Composition provides strong coupling between classes.",
      "Composition leads to tight encapsulation."
    ],
    "answer": 1
  },
  {
    "Id": 303,
    "question": "What is the primary difference between aggregation and composition?",
    "optionList": [
      "Aggregation allows for the creation of new objects within another object, while composition involves acquiring properties and behaviors from a superclass.",
      "Aggregation involves creating new objects within another object, while composition involves a whole-part relationship where the parts cannot exist without the whole.",
      "Aggregation represents a strong form of association, while composition represents a weak form of association.",
      "Aggregation is a \"has-a\" relationship, while composition is an \"is-a\" relationship."
    ],
    "answer": 1
  },
  {
    "Id": 304,
    "question": "Which of the following statements best describes aggregation?",
    "optionList": [
      "It involves a strong relationship where the child object cannot exist without the parent object.",
      "It involves creating new objects within another object.",
      "It represents a whole-part relationship where the parts can exist independently of the whole.",
      "It allows for the modification of inherited properties and behaviors."
    ],
    "answer": 2
  },
  {
    "Id": 305,
    "question": "In aggregation, how are the lifetimes of the objects typically managed?",
    "optionList": [
      "The objects share the same lifetime.",
      "The objects have independent lifetimes.",
      "The lifetime of the container object depends on the lifetime of the contained object.",
      "The lifetime of the contained object depends on the lifetime of the container object."
    ],
    "answer": 1
  },
  {
    "Id": 306,
    "question": "Which of the following is an example of aggregation?",
    "optionList": [
      "A car engine and a car",
      "A university and a student",
      "A house and its rooms",
      "A person and their brain"
    ],
    "answer": 1
  },
  {
    "Id": 307,
    "question": "Which of the following best describes a Has-A relationship in object-oriented programming?",
    "optionList": [
      "An object contains another object",
      "An object is a subclass of another object",
      "An object is composed of multiple objects",
      "An object is associated with another object"
    ],
    "answer": 0
  },
  {
    "Id": 308,
    "question": "In a Has-A relationship, what does the term \"Has-A\" imply?",
    "optionList": [
      "Inheritance",
      "Composition",
      "Aggregation",
      "Polymorphism"
    ],
    "answer": 1
  },
  {
    "Id": 309,
    "question": "Which of the following statements is true regarding a Has-A relationship?",
    "optionList": [
      "It implies an \"is-a\" relationship between classes.",
      "It implies a weak association between classes.",
      "It implies a strong association between classes.",
      "It implies an \"has-a\" relationship between classes."
    ],
    "answer": 3
  },
  {
    "Id": 310,
    "question": "Which of the following scenarios represents a Has-A relationship?",
    "optionList": [
      "A car is a vehicle",
      "A student inherits from a person",
      "A library has books",
      "A dog is associated with a leash"
    ],
    "answer": 2
  },
  {
    "Id": 311,
    "question": "What is the key difference between composition and inheritance?",
    "optionList": [
      "Inheritance allows for code reuse, while composition involves creating objects within another object.",
      "Composition allows for code reuse, while inheritance involves creating objects within another object.",
      "Inheritance involves a whole-part relationship, while composition involves acquiring properties and behaviors from a superclass.",
      "Composition involves acquiring properties and behaviors from a superclass, while inheritance involves a whole-part relationship."
    ],
    "answer": 0
  },
  {
    "Id": 312,
    "question": "Which of the following scenarios best illustrates composition?",
    "optionList": [
      "A car engine and a car",
      "A university and a student",
      "A house and its rooms",
      "A person and their brain"
    ],
    "answer": 2
  },
  {
    "Id": 313,
    "question": "What is a potential drawback of using inheritance over composition?",
    "optionList": [
      "Tight coupling between classes",
      "Reduced code reuse",
      "Increased complexity",
      "Limited encapsulation"
    ],
    "answer": 0
  },
  {
    "Id": 314,
    "question": "What distinguishes aggregation from composition?",
    "optionList": [
      "Aggregation involves creating objects within another object, while composition represents a whole-part relationship.",
      "Aggregation represents a strong association, while composition represents a weak association between classes.",
      "Aggregation allows for code reuse, while composition involves a whole-part relationship where the parts cannot exist without the whole.",
      "Aggregation represents a whole-part relationship, while composition involves acquiring properties and behaviors from a superclass."
    ],
    "answer": 1
  },
  {
    "Id": 315,
    "question": "Which of the following scenarios best illustrates aggregation?",
    "optionList": [
      "A car engine and a car",
      "A university and a student",
      "A house and its rooms",
      "A person and their brain"
    ],
    "answer": 1
  },
  {
    "Id": 316,
    "question": "What is a distinguishing factor between aggregation and composition?",
    "optionList": [
      "Aggregation implies a whole-part relationship, while composition involves creating objects within another object.",
      "Aggregation allows for code reuse, while composition represents a strong association between classes.",
      "Aggregation represents a weak association, while composition represents a strong association between classes.",
      "Aggregation involves acquiring properties and behaviors from a superclass, while composition involves a whole-part relationship."
    ],
    "answer": 0
  },
  {
    "Id": 317,
    "question": "Which of the following best describes composition?",
    "optionList": [
      "It represents a \"is-a\" relationship between classes.",
      "It allows for the modification of inherited properties and behaviors.",
      "It involves creating objects within another object.",
      "It represents a weak association between classes."
    ],
    "answer": 2
  },
  {
    "Id": 318,
    "question": "What is an advantage of using composition over inheritance?",
    "optionList": [
      "Reduced code complexity",
      "Increased code reuse",
      "Loose coupling between classes",
      "Strong encapsulation"
    ],
    "answer": 3
  },
  {
    "Id": 319,
    "question": "In composition, what happens to the contained objects when the container object is destroyed?",
    "optionList": [
      "They are unaffected",
      "They are destroyed along with the container object",
      "They become inaccessible but continue to exist",
      "They become orphaned objects"
    ],
    "answer": 1
  },
  {
    "Id": 320,
    "question": "Which of the following statements about aggregation is true?",
    "optionList": [
      "Aggregation implies a strong ownership relationship.",
      "Aggregation allows for tight coupling between classes.",
      "Aggregation allows for code reuse through inheritance.",
      "Aggregation represents a whole-part relationship where the parts cannot exist without the whole."
    ],
    "answer": 3
  },
  {
    "Id": 321,
    "question": "In a Has-A relationship, what does the \"Has-A\" refer to?",
    "optionList": [
      "Inheritance",
      "Composition",
      "Aggregation",
      "Association"
    ],
    "answer": 1
  },
  {
    "Id": 322,
    "question": "Which of the following best describes a Has-A relationship?",
    "optionList": [
      "It implies an \"is-a\" relationship between classes.",
      "It implies a weak association between classes.",
      "It implies a strong association between classes.",
      "It implies an \"has-a\" relationship between classes."
    ],
    "answer": 3
  },
  {
    "Id": 323,
    "question": "What is the primary characteristic of a Has-A relationship?",
    "optionList": [
      "Code reuse",
      "Code encapsulation",
      "Object containment",
      "Class inheritance"
    ],
    "answer": 2
  },
  {
    "Id": 324,
    "question": "What is the main advantage of using composition over inheritance?",
    "optionList": [
      "Code reuse",
      "Code encapsulation",
      "Tight coupling",
      "Multiple inheritance"
    ],
    "answer": 1
  },
  {
    "Id": 325,
    "question": "Which of the following statements about composition is true?",
    "optionList": [
      "Composition allows for the creation of new objects within another object.",
      "Composition promotes strong coupling between classes.",
      "Composition involves acquiring properties and behaviors from a superclass.",
      "Composition represents a whole-part relationship."
    ],
    "answer": 3
  },
  {
    "Id": 326,
    "question": "In composition, how are the lifetimes of the contained objects typically managed?",
    "optionList": [
      "The objects have independent lifetimes.",
      "The objects share the same lifetime.",
      "The lifetime of the container object depends on the lifetime of the contained object.",
      "The lifetime of the contained object depends on the lifetime of the container object."
    ],
    "answer": 1
  },
  {
    "Id": 327,
    "question": "In aggregation, how are the lifetimes of the contained objects typically managed?",
    "optionList": [
      "The objects have independent lifetimes.",
      "The objects share the same lifetime.",
      "The lifetime of the container object depends on the lifetime of the contained object.",
      "The lifetime of the contained object depends on the lifetime of the container object."
    ],
    "answer": 0
  },
  {
    "Id": 328,
    "question": "What is a characteristic of a Has-A relationship?",
    "optionList": [
      "Code reuse",
      "Code encapsulation",
      "Object containment",
      "Class inheritance"
    ],
    "answer": 2
  },
  {
    "Id": 329,
    "question": "Which of the following scenarios best illustrates a Has-A relationship?",
    "optionList": [
      "A car is a vehicle",
      "A dog inherits from an animal",
      "A student is a person",
      "A tree has branches"
    ],
    "answer": 3
  },
  {
    "Id": 330,
    "question": "What is a key advantage of using composition over inheritance?",
    "optionList": [
      "Tight encapsulation",
      "Enhanced code reuse",
      "Reduced coupling",
      "Improved polymorphism"
    ],
    "answer": 0
  },
  {
    "Id": 331,
    "question": "What does association represent in object-oriented programming?",
    "optionList": [
      "Inheritance relationship",
      "Code encapsulation",
      "Code reuse",
      "Relationship between classes"
    ],
    "answer": 3
  },
  {
    "Id": 332,
    "question": "Which of the following best describes association?",
    "optionList": [
      "It represents a \"is-a\" relationship between classes.",
      "It represents a \"has-a\" relationship between classes.",
      "It represents a whole-part relationship between classes.",
      "It represents a strong ownership relationship between classes."
    ],
    "answer": 1
  },
  {
    "Id": 333,
    "question": "In association, how are the associated objects typically accessed?",
    "optionList": [
      "Through inheritance",
      "Through composition",
      "Through member functions",
      "Through aggregation"
    ],
    "answer": 2
  },
  {
    "Id": 334,
    "question": "Which of the following scenarios best illustrates association?",
    "optionList": [
      "A car has four wheels",
      "A person is a human",
      "A library contains books",
      "A student attends a university"
    ],
    "answer": 3
  },
  {
    "Id": 335,
    "question": "What is a characteristic of association?",
    "optionList": [
      "Object containment",
      "Code reuse",
      "Strong coupling",
      "Relationship between objects"
    ],
    "answer": 3
  },
  {
    "Id": 336,
    "question": "What does multiplicity refer to in object-oriented modeling?",
    "optionList": [
      "The number of methods in a class",
      "The number of attributes in a class",
      "The cardinality of a relationship between classes",
      "The level of inheritance between classes"
    ],
    "answer": 2
  },
  {
    "Id": 337,
    "question": "What is the multiplicity of a one-to-one relationship?",
    "optionList": [
      "One object is associated with many objects",
      "Many objects are associated with one object",
      "Each object is associated with exactly one other object",
      "Each object is associated with multiple other objects"
    ],
    "answer": 2
  },
  {
    "Id": 338,
    "question": "In a one-to-many relationship, how are the associated objects connected?",
    "optionList": [
      "Each object is associated with multiple other objects",
      "Each object is associated with exactly one other object",
      "Many objects are associated with one object",
      "One object is associated with many objects"
    ],
    "answer": 3
  },
  {
    "Id": 339,
    "question": "What does a many-to-many relationship indicate?",
    "optionList": [
      "Each object is associated with multiple other objects",
      "Each object is associated with exactly one other object",
      "Many objects are associated with one object",
      "Many objects are associated with multiple other objects"
    ],
    "answer": 3
  },
  {
    "Id": 340,
    "question": "What distinguishes association from aggregation and composition?",
    "optionList": [
      "Association implies a strong ownership relationship.",
      "Association involves creating objects within another object.",
      "Association represents a \"has-a\" relationship between classes.",
      "Association represents a whole-part relationship between classes."
    ],
    "answer": 2
  },
  {
    "Id": 341,
    "question": "What does aggregation imply in terms of ownership?",
    "optionList": [
      "Strong ownership",
      "Weak ownership",
      "No ownership",
      "Shared ownership"
    ],
    "answer": 1
  },
  {
    "Id": 342,
    "question": "Which of the following statements about association, aggregation, and composition is true?",
    "optionList": [
      "Association implies a strong ownership relationship, while aggregation and composition represent weaker forms of association.",
      "Aggregation and composition both imply a strong ownership relationship, while association represents a weaker form of association.",
      "Association, aggregation, and composition all represent different forms of association between classes.",
      "Association and aggregation represent stronger forms of association than composition."
    ],
    "answer": 2
  },
  {
    "Id": 343,
    "question": "What is the primary characteristic of association?",
    "optionList": [
      "Code encapsulation",
      "Object containment",
      "Relationship between objects",
      "Inheritance relationship"
    ],
    "answer": 2
  },
  {
    "Id": 344,
    "question": "Which of the following statements best defines association in object-oriented programming?",
    "optionList": [
      "It represents the relationship between a subclass and a superclass.",
      "It represents the inheritance hierarchy between classes.",
      "It represents the logical connection or relationship between classes.",
      "It represents the encapsulation of data within a class."
    ],
    "answer": 2
  },
  {
    "Id": 345,
    "question": "In an association, what is typically exchanged between objects?",
    "optionList": [
      "Data attributes",
      "Method implementations",
      "Message passing",
      "Reference pointers"
    ],
    "answer": 3
  },
  {
    "Id": 346,
    "question": "What is a characteristic of association in object-oriented design?",
    "optionList": [
      "Strong code reuse",
      "Tight encapsulation",
      "Loose coupling",
      "Hierarchical structure"
    ],
    "answer": 2
  },
  {
    "Id": 347,
    "question": "What does multiplicity represent in an association between classes?",
    "optionList": [
      "The number of methods in a class",
      "The number of attributes in a class",
      "The cardinality of the relationship between instances of classes",
      "The depth of inheritance between classes"
    ],
    "answer": 2
  },
  {
    "Id": 348,
    "question": "In a one-to-one relationship, how many instances of one class are associated with an instance of the other class?",
    "optionList": [
      "One",
      "Many",
      "Zero or one",
      "Zero or many"
    ],
    "answer": 0
  },
  {
    "Id": 349,
    "question": "In a one-to-many relationship, how many instances of one class are associated with an instance of the other class?",
    "optionList": [
      "One",
      "Many",
      "Zero or one",
      "Zero or many"
    ],
    "answer": 1
  },
  {
    "Id": 350,
    "question": "In a many-to-many relationship, how many instances of each class can be associated with instances of the other class?",
    "optionList": [
      "One",
      "Many",
      "Zero or one",
      "Zero or many"
    ],
    "answer": 1
  },
  {
    "Id": 351,
    "question": "In a many-to-many relationship, what is the multiplicity on both sides?",
    "optionList": [
      "Many-to-many",
      "One-to-many",
      "Many-to-one",
      "One-to-one"
    ],
    "answer": 0
  },
  {
    "Id": 352,
    "question": "In an aggregation relationship, how does the lifetime of the parts relate to the lifetime of the whole?",
    "optionList": [
      "Parts have a longer lifetime than the whole.",
      "Parts have a shorter lifetime than the whole.",
      "Parts have an independent lifetime from the whole.",
      "Parts have the same lifetime as the whole."
    ],
    "answer": 2
  },
  {
    "Id": 353,
    "question": "Which of the following best describes the association relationship?",
    "optionList": [
      "A strong ownership relationship between classes.",
      "A relationship where one class is a part of another class.",
      "A logical connection or relationship between classes.",
      "A relationship where one class inherits from another class."
    ],
    "answer": 2
  },
  {
    "Id": 354,
    "question": "What is the main difference between aggregation and composition?",
    "optionList": [
      "Aggregation allows for code reuse, while composition does not.",
      "Aggregation represents a stronger relationship between classes than composition.",
      "Aggregation allows for a \"has-a\" relationship between classes, while composition represents a \"is-a\" relationship.",
      "Aggregation allows for the sharing of ownership, while composition implies exclusive ownership."
    ],
    "answer": 3
  },
  {
    "Id": 355,
    "question": "In a one-to-many relationship, what is the multiplicity on the \"many\" side?",
    "optionList": [
      "One",
      "Many",
      "Zero or one",
      "Zero or many"
    ],
    "answer": 1
  },
  {
    "Id": 356,
    "question": "Which of the following scenarios best represents a many-to-many relationship?",
    "optionList": [
      "A student has multiple classes, and a class has multiple students.",
      "A car has multiple wheels, and a wheel belongs to multiple cars.",
      "A person has one passport, and a passport belongs to one person.",
      "A company has multiple employees, and an employee works for multiple companies."
    ],
    "answer": 0
  },
  {
    "Id": 357,
    "question": "What does multiplicity specify in an association relationship?",
    "optionList": [
      "The number of attributes in a class",
      "The number of methods in a class",
      "The cardinality of the relationship between classes",
      "The level of inheritance between classes"
    ],
    "answer": 2
  },
  {
    "Id": 358,
    "question": "Which of the following statements about multiplicity in an association is true?",
    "optionList": [
      "It specifies the number of methods in a class.",
      "It specifies the number of attributes in a class.",
      "It specifies the number of instances of one class associated with an instance of another class.",
      "It specifies the level of inheritance between classes."
    ],
    "answer": 2
  },
  {
    "Id": 359,
    "question": "What does multiplicity represent in an association relationship?",
    "optionList": [
      "The number of methods in a class",
      "The number of attributes in a class",
      "The cardinality of the relationship between instances of classes",
      "The level of inheritance between classes"
    ],
    "answer": 2
  },
  {
    "Id": 360,
    "question": "Which of the following statements about association is true?",
    "optionList": [
      "It implies a strong ownership relationship between classes.",
      "It represents a weak form of relationship between classes.",
      "It involves creating new objects within another object.",
      "It allows for code reuse through inheritance."
    ],
    "answer": 1
  },
  {
    "Id": 361,
    "question": "In an association relationship, what is exchanged between objects?",
    "optionList": [
      "Data attributes",
      "Method implementations",
      "Message passing",
      "Reference pointers"
    ],
    "answer": 3
  },
  {
    "Id": 362,
    "question": "Which scenario best represents an association relationship?",
    "optionList": [
      "A university \"is composed of\" departments.",
      "A car \"contains\" engines.",
      "A person \"inherits from\" a human.",
      "A teacher \"has a\" student."
    ],
    "answer": 3
  },
  {
    "Id": 363,
    "question": "What does association represent in object-oriented design?",
    "optionList": [
      "Strong code reuse",
      "Tight encapsulation",
      "Loose coupling",
      "Hierarchical structure"
    ],
    "answer": 2
  },
  {
    "Id": 364,
    "question": "Which statement best describes aggregation?",
    "optionList": [
      "It represents a strong ownership relationship between classes.",
      "It allows for code reuse through inheritance.",
      "It involves creating new objects within another object.",
      "It represents a weak form of association between classes."
    ],
    "answer": 3
  },
  {
    "Id": 365,
    "question": "What happens to the contained objects in composition when the container object is destroyed?",
    "optionList": [
      "They are unaffected",
      "They are destroyed along with the container object",
      "They become inaccessible but continue to exist",
      "They become orphaned objects"
    ],
    "answer": 1
  },
  {
    "Id": 366,
    "question": "What is the primary goal of requirement gathering in Object-Oriented Analysis and Design (OOAD)?",
    "optionList": [
      "To design user interfaces",
      "To understand and document system requirements",
      "To implement algorithms for system functionality",
      "To optimize system performance"
    ],
    "answer": 1
  },
  {
    "Id": 367,
    "question": "Which of the following techniques is commonly used for gathering requirements in OOAD?",
    "optionList": [
      "Use case analysis",
      "Binary search algorithms",
      "Loop optimization",
      "Data encryption"
    ],
    "answer": 0
  },
  {
    "Id": 368,
    "question": "Who typically participates in requirement gathering sessions?",
    "optionList": [
      "Only software developers",
      "Only project managers",
      "Stakeholders, including users, developers, and other relevant parties",
      "External consultants"
    ],
    "answer": 2
  },
  {
    "Id": 369,
    "question": "Which phase of the software development life cycle does requirement gathering belong to?",
    "optionList": [
      "Design",
      "Implementation",
      "Testing",
      "Planning"
    ],
    "answer": 3
  },
  {
    "Id": 370,
    "question": "What is the purpose of documenting requirements during requirement gathering?",
    "optionList": [
      "To create user manuals",
      "To provide a basis for system design and development",
      "To generate test cases",
      "To define project milestones"
    ],
    "answer": 1
  },
  {
    "Id": 371,
    "question": "What is the primary purpose of a use case diagram in OOAD?",
    "optionList": [
      "To show the interaction between classes in a system",
      "To represent the behavior of a system from the perspective of its users",
      "To define the attributes of a class",
      "To depict the sequence of activities in a system"
    ],
    "answer": 1
  },
  {
    "Id": 372,
    "question": "In a use case diagram, what represents a specific action performed by the system?",
    "optionList": [
      "Actors",
      "Use cases",
      "Associations",
      "Generalizations"
    ],
    "answer": 1
  },
  {
    "Id": 373,
    "question": "Which of the following is true about actors in a use case diagram?",
    "optionList": [
      "Actors represent system functionalities.",
      "Actors represent the environment outside the system.",
      "Actors represent classes in the system.",
      "Actors represent attributes of the system."
    ],
    "answer": 1
  },
  {
    "Id": 374,
    "question": "What is an extension use case in a use case diagram?",
    "optionList": [
      "A use case that is included within another use case",
      "A use case that is executed before another use case",
      "A use case that is executed after another use case under certain conditions",
      "A use case that is executed concurrently with another use case"
    ],
    "answer": 2
  },
  {
    "Id": 375,
    "question": "Which relationship in a use case diagram indicates that one use case includes the functionality of another use case?",
    "optionList": [
      "Association",
      "Generalization",
      "Dependency",
      "Include"
    ],
    "answer": 3
  },
  {
    "Id": 376,
    "question": "What is the primary purpose of a class diagram in OOAD?",
    "optionList": [
      "To represent the flow of activities in a system",
      "To depict the interaction between classes in a system",
      "To define the behavior of use cases",
      "To represent the structure of a system in terms of classes and their relationships"
    ],
    "answer": 3
  },
  {
    "Id": 377,
    "question": "In a class diagram, what does a solid line with a filled arrowhead represent?",
    "optionList": [
      "Association",
      "Generalization",
      "Dependency",
      "Aggregation"
    ],
    "answer": 0
  },
  {
    "Id": 378,
    "question": "What is a stereotype in a class diagram?",
    "optionList": [
      "A type of relationship between classes",
      "A constraint on the behavior of a class",
      "A graphical representation of a class",
      "A predefined category or type of class"
    ],
    "answer": 3
  },
  {
    "Id": 379,
    "question": "In a class diagram, what does a dashed line with an open arrowhead represent?",
    "optionList": [
      "Association",
      "Generalization",
      "Dependency",
      "Aggregation"
    ],
    "answer": 2
  },
  {
    "Id": 380,
    "question": "What does a diamond symbol in a class diagram represent?",
    "optionList": [
      "Aggregation",
      "Generalization",
      "Dependency",
      "Association"
    ],
    "answer": 1
  },
  {
    "Id": 381,
    "question": "What is the primary purpose of a sequence diagram in OOAD?",
    "optionList": [
      "To represent the structure of a system",
      "To depict the interaction between objects over time",
      "To define the behavior of use cases",
      "To represent the flow of activities in a system"
    ],
    "answer": 1
  },
  {
    "Id": 382,
    "question": "In a sequence diagram, what represents an object's lifespan?",
    "optionList": [
      "Vertical dashed lines",
      "Horizontal solid lines",
      "Arrows",
      "Boxes"
    ],
    "answer": 1
  },
  {
    "Id": 383,
    "question": "What is represented by the vertical dashed lines in a sequence diagram?",
    "optionList": [
      "Messages between objects",
      "Object lifelines",
      "Activation of objects",
      "Control flow"
    ],
    "answer": 1
  },
  {
    "Id": 384,
    "question": "In a sequence diagram, what represents the order of message execution between objects?",
    "optionList": [
      "Vertical dashed lines",
      "Horizontal solid lines",
      "Arrows",
      "Boxes"
    ],
    "answer": 2
  },
  {
    "Id": 385,
    "question": "What does a return message indicate in a sequence diagram?",
    "optionList": [
      "The termination of an object's activation",
      "The transfer of control to another object",
      "The completion of a method execution",
      "The creation of a new object"
    ],
    "answer": 2
  },
  {
    "Id": 386,
    "question": "What is the primary purpose of a collaboration diagram in OOAD?",
    "optionList": [
      "To represent the structure of a system",
      "To depict the interaction between objects in a system",
      "To define the behavior of use cases",
      "To represent the flow of activities in a system"
    ],
    "answer": 1
  },
  {
    "Id": 387,
    "question": "In a collaboration diagram, what represents objects?",
    "optionList": [
      "Rectangles",
      "Circles",
      "Lines",
      "Squares"
    ],
    "answer": 0
  },
  {
    "Id": 388,
    "question": "What do the connecting lines between objects represent in a collaboration diagram?",
    "optionList": [
      "Messages exchanged between objects",
      "Object lifelines",
      "Activation of objects",
      "Control flow"
    ],
    "answer": 0
  },
  {
    "Id": 389,
    "question": "In a collaboration diagram, what does the numbering of messages represent?",
    "optionList": [
      "The order of message execution",
      "The priority of messages",
      "The type of messages",
      "The frequency of messages"
    ],
    "answer": 0
  },
  {
    "Id": 390,
    "question": "What does a dashed line between objects represent in a collaboration diagram?",
    "optionList": [
      "Synchronous message",
      "Asynchronous message",
      "Control flow",
      "Activation"
    ],
    "answer": 1
  },
  {
    "Id": 391,
    "question": "What is the primary purpose of a state diagram in OOAD?",
    "optionList": [
      "To represent the structure of a system",
      "To depict the interaction between objects in a system",
      "To define the behavior of use cases",
      "To model the behavior of an object in different states"
    ],
    "answer": 3
  },
  {
    "Id": 392,
    "question": "In a state diagram, what represents a state of an object?",
    "optionList": [
      "Rectangle",
      "Circle",
      "Arrow",
      "Line"
    ],
    "answer": 0
  },
  {
    "Id": 393,
    "question": "What do the arrows between states in a state diagram represent?",
    "optionList": [
      "Transitions between states",
      "Actions performed by the object",
      "Conditions triggering state changes",
      "Object lifelines"
    ],
    "answer": 0
  },
  {
    "Id": 394,
    "question": "In a state diagram, what is represented by a transition labeled with a condition?",
    "optionList": [
      "An event that triggers the transition",
      "A guard condition that must be true for the transition to occur",
      "An action performed by the object during the transition",
      "A message sent to another object"
    ],
    "answer": 1
  },
  {
    "Id": 395,
    "question": "What is a composite state in a state diagram?",
    "optionList": [
      "A state that contains other states",
      "A state that is part of a larger system",
      "A state that represents the initial state of an object",
      "A state that represents the final state of an object"
    ],
    "answer": 0
  },
  {
    "Id": 396,
    "question": "What is the primary purpose of an activity diagram in OOAD?",
    "optionList": [
      "To represent the structure of a system",
      "To depict the interaction between objects in a system",
      "To define the behavior of use cases",
      "To model the flow of activities or processes in a system"
    ],
    "answer": 3
  },
  {
    "Id": 397,
    "question": "In an activity diagram, what represents an activity or task?",
    "optionList": [
      "Rectangle",
      "Circle",
      "Arrow",
      "Line"
    ],
    "answer": 0
  },
  {
    "Id": 398,
    "question": "What do the arrows between activities in an activity diagram represent?",
    "optionList": [
      "Transitions between activities",
      "Actions performed by the system",
      "Conditions triggering activity changes",
      "Object lifelines"
    ],
    "answer": 0
  },
  {
    "Id": 399,
    "question": "In an activity diagram, what is represented by a decision node?",
    "optionList": [
      "A point where multiple transitions converge",
      "A point where the flow of control splits into multiple paths",
      "A point where the flow of control ends",
      "A point where activities are repeated"
    ],
    "answer": 1
  },
  {
    "Id": 400,
    "question": "What is the purpose of a fork node in an activity diagram?",
    "optionList": [
      "To synchronize multiple incoming flows of control",
      "To split the flow of control into multiple concurrent paths",
      "To terminate the flow of control",
      "To join multiple outgoing flows of control"
    ],
    "answer": 1
  },
  {
    "Id": 401,
    "question": "What is the main goal of requirement gathering in Object-Oriented Analysis and Design (OOAD)?",
    "optionList": [
      "To design user interfaces",
      "To understand and document system requirements",
      "To implement algorithms for system functionality",
      "To optimize system performance"
    ],
    "answer": 1
  },
  {
    "Id": 402,
    "question": "Which of the following is a common technique used for requirement gathering in OOAD?",
    "optionList": [
      "UML modeling",
      "Software testing",
      "Agile development",
      "Use case analysis"
    ],
    "answer": 3
  },
  {
    "Id": 403,
    "question": "Who are the primary stakeholders involved in requirement gathering sessions?",
    "optionList": [
      "Software developers only",
      "Project managers only",
      "Stakeholders, including users, developers, and other relevant parties",
      "External consultants"
    ],
    "answer": 2
  },
  {
    "Id": 404,
    "question": "In which phase of the software development life cycle does requirement gathering typically occur?",
    "optionList": [
      "Design",
      "Implementation",
      "Testing",
      "Planning"
    ],
    "answer": 3
  },
  {
    "Id": 405,
    "question": "What is the importance of documenting requirements during requirement gathering?",
    "optionList": [
      "To create user manuals",
      "To provide a basis for system design and development",
      "To generate test cases",
      "To define project milestones"
    ],
    "answer": 1
  },
  {
    "Id": 406,
    "question": "What does an actor represent in a use case diagram?",
    "optionList": [
      "A specific action performed by the system",
      "A user or an external system interacting with the system",
      "A method of a class",
      "An attribute of a class"
    ],
    "answer": 1
  },
  {
    "Id": 407,
    "question": "What does the association line between an actor and a use case represent in a use case diagram?",
    "optionList": [
      "Inheritance relationship",
      "Dependency relationship",
      "Communication link",
      "Inclusion relationship"
    ],
    "answer": 2
  },
  {
    "Id": 408,
    "question": "What is the purpose of extending a use case in a use case diagram?",
    "optionList": [
      "To reuse common functionalities across multiple use cases",
      "To define alternative scenarios within a use case",
      "To define additional functionalities for specific scenarios",
      "To define relationships between actors and use cases"
    ],
    "answer": 2
  },
  {
    "Id": 409,
    "question": "What does an association line between two classes in a class diagram represent?",
    "optionList": [
      "Inheritance relationship",
      "Dependency relationship",
      "Communication link",
      "Relationship between instances of the classes"
    ],
    "answer": 3
  },
  {
    "Id": 410,
    "question": "What is represented by a multiplicity value in an association between classes in a class diagram?",
    "optionList": [
      "The number of methods in a class",
      "The number of attributes in a class",
      "The number of instances of one class associated with an instance of another class",
      "The level of inheritance between classes"
    ],
    "answer": 2
  },
  {
    "Id": 411,
    "question": "What does a generalization relationship between two classes in a class diagram represent?",
    "optionList": [
      "A \"has-a\" relationship",
      "An \"is-a\" relationship",
      "A \"uses\" relationship",
      "An \"owns\" relationship"
    ],
    "answer": 1
  },
  {
    "Id": 412,
    "question": "What is the purpose of an interface in a class diagram?",
    "optionList": [
      "To represent a specific behavior of a class",
      "To define a contract for implementing classes",
      "To represent the structure of a system",
      "To depict the interaction between classes"
    ],
    "answer": 1
  },
  {
    "Id": 413,
    "question": "What is represented by a self-message in a sequence diagram?",
    "optionList": [
      "A message sent from one object to another object",
      "A message sent from an object to itself",
      "A message sent asynchronously",
      "A message sent conditionally"
    ],
    "answer": 1
  },
  {
    "Id": 414,
    "question": "What is the purpose of a combined fragment in a sequence diagram?",
    "optionList": [
      "To group messages together",
      "To represent alternative or parallel sequences of messages",
      "To represent the creation of new objects",
      "To represent the termination of objects"
    ],
    "answer": 1
  },
  {
    "Id": 415,
    "question": "What is the purpose of a communication diagram in OOAD?",
    "optionList": [
      "To represent the structure of a system",
      "To depict the interaction between objects in a system",
      "To define the behavior of use cases",
      "To model the flow of activities in a system"
    ],
    "answer": 1
  },
  {
    "Id": 416,
    "question": "What is the difference between a collaboration diagram and a sequence diagram?",
    "optionList": [
      "Collaboration diagrams focus on object interactions, while sequence diagrams focus on the order of message exchange.",
      "Collaboration diagrams focus on the order of message exchange, while sequence diagrams focus on object interactions.",
      "Collaboration diagrams depict static relationships, while sequence diagrams depict dynamic interactions.",
      "Collaboration diagrams depict dynamic interactions, while sequence diagrams depict static relationships."
    ],
    "answer": 0
  },
  {
    "Id": 417,
    "question": "What is the purpose of a swimlane in a sequence diagram or activity diagram?",
    "optionList": [
      "To represent the flow of control within a single object",
      "To represent parallel flows of control involving multiple objects",
      "To represent a specific phase in the software development life cycle",
      "To represent the order of message exchange between objects"
    ],
    "answer": 1
  },
  {
    "Id": 418,
    "question": "Which UML diagram is commonly used to represent the interaction between objects in a system's dynamic behavior?",
    "optionList": [
      "Use case diagram",
      "Class diagram",
      "Collaboration diagram",
      "Deployment diagram"
    ],
    "answer": 2
  },
  {
    "Id": 419,
    "question": "What does a stereotype represent in a UML diagram?",
    "optionList": [
      "A predefined category or type of element",
      "A constraint or condition on an element",
      "A graphical representation of an element",
      "A relationship between elements"
    ],
    "answer": 0
  },
  {
    "Id": 420,
    "question": "Which of the following is NOT a primary goal of requirement gathering in Object-Oriented Analysis and Design (OOAD)?",
    "optionList": [
      "Understanding user needs",
      "Defining system functionality",
      "Optimizing system performance",
      "Documenting system requirements"
    ],
    "answer": 2
  },
  {
    "Id": 421,
    "question": "What is the role of stakeholders in requirement gathering sessions?",
    "optionList": [
      "To write code for the system",
      "To define project timelines",
      "To provide input on system requirements",
      "To manage project resources"
    ],
    "answer": 2
  },
  {
    "Id": 422,
    "question": "What techniques can be used for requirement gathering in OOAD?",
    "optionList": [
      "Data encryption",
      "UML modeling",
      "Loop optimization",
      "Network administration"
    ],
    "answer": 1
  },
  {
    "Id": 423,
    "question": "What is an actor in a use case diagram?",
    "optionList": [
      "An object representing a system component",
      "A user or an external system interacting with the system",
      "A method of a class",
      "An attribute of a class"
    ],
    "answer": 1
  },
  {
    "Id": 424,
    "question": "What does an association line represent in a use case diagram?",
    "optionList": [
      "Inheritance relationship",
      "Dependency relationship",
      "Communication link",
      "Inclusion relationship"
    ],
    "answer": 2
  },
  {
    "Id": 425,
    "question": "What does an extend relationship represent in a use case diagram?",
    "optionList": [
      "An optional addition to a use case",
      "A mandatory addition to a use case",
      "A constraint on a use case",
      "A condition for a use case"
    ],
    "answer": 0
  },
  {
    "Id": 426,
    "question": "What is the purpose of an include relationship in a use case diagram?",
    "optionList": [
      "To add optional functionality to a use case",
      "To define common behavior shared by multiple use cases",
      "To specify conditional behavior within a use case",
      "To model the relationships between actors and use cases"
    ],
    "answer": 1
  },
  {
    "Id": 427,
    "question": "What does an association line between two classes represent in a class diagram?",
    "optionList": [
      "Inheritance relationship",
      "Dependency relationship",
      "Communication link",
      "Relationship between instances of the classes"
    ],
    "answer": 3
  },
  {
    "Id": 428,
    "question": "What is the purpose of Object-Oriented Analysis and Design (OOAD)?",
    "optionList": [
      "To design user interfaces",
      "To model the static and dynamic aspects of a system using objects",
      "To manage project resources",
      "To write code for the system"
    ],
    "answer": 1
  },
  {
    "Id": 429,
    "question": "Which of the following is a primary goal of OOAD?",
    "optionList": [
      "Enhancing system security",
      "Improving system performance",
      "Enhancing system maintainability",
      "Increasing system complexity"
    ],
    "answer": 2
  },
  {
    "Id": 430,
    "question": "What are some benefits of using OOAD?",
    "optionList": [
      "Improved scalability and reusability",
      "Decreased system reliability",
      "Increased system complexity",
      "Reduced development time"
    ],
    "answer": 0
  },
  {
    "Id": 431,
    "question": "What is the difference between object-oriented analysis and object-oriented design?",
    "optionList": [
      "Analysis focuses on defining system requirements, while design focuses on specifying system architecture and implementation details.",
      "Analysis focuses on defining system architecture, while design focuses on specifying system requirements.",
      "Analysis focuses on implementing system functionality, while design focuses on testing system components.",
      "Analysis focuses on testing system components, while design focuses on implementing system functionality."
    ],
    "answer": 0
  },
  {
    "Id": 432,
    "question": "What role does UML play in Object-Oriented Analysis and Design?",
    "optionList": [
      "UML is a programming language used for system implementation",
      "UML provides a standardized notation for modeling system structure and behavior",
      "UML is used for testing system components",
      "UML is used for managing project resources"
    ],
    "answer": 1
  },
  {
    "Id": 433,
    "question": "Which of the following is NOT a technique commonly used for requirement gathering in OOAD?",
    "optionList": [
      "Use case modeling",
      "Prototyping",
      "Flowcharting",
      "Interviews and surveys"
    ],
    "answer": 2
  },
  {
    "Id": 434,
    "question": "Which creational design pattern is used to ensure that a class has only one instance and provides a global point of access to it?",
    "optionList": [
      "Factory",
      "Singleton",
      "Builder",
      "Prototype"
    ],
    "answer": 1
  },
  {
    "Id": 435,
    "question": "In which creational design pattern does a separate Builder class construct a complex object step by step?",
    "optionList": [
      "Factory",
      "Singleton",
      "Builder",
      "Prototype"
    ],
    "answer": 2
  },
  {
    "Id": 436,
    "question": "Which creational design pattern involves creating new objects by copying an existing object, known as the prototype?",
    "optionList": [
      "Factory",
      "Singleton",
      "Builder",
      "Prototype"
    ],
    "answer": 3
  },
  {
    "Id": 437,
    "question": "Which structural design pattern allows objects with incompatible interfaces to collaborate?",
    "optionList": [
      "Adapter",
      "Bridge",
      "Composite",
      "Decorator"
    ],
    "answer": 0
  },
  {
    "Id": 438,
    "question": "In which structural design pattern does a single interface represent an entire subsystem?",
    "optionList": [
      "Adapter",
      "Bridge",
      "Composite",
      "Facade"
    ],
    "answer": 3
  },
  {
    "Id": 439,
    "question": "Which structural design pattern allows clients to treat individual objects and compositions of objects uniformly?",
    "optionList": [
      "Adapter",
      "Bridge",
      "Composite",
      "Decorator"
    ],
    "answer": 2
  },
  {
    "Id": 440,
    "question": "Which structural design pattern focuses on adding new functionality to an existing object dynamically?",
    "optionList": [
      "Adapter",
      "Bridge",
      "Composite",
      "Decorator"
    ],
    "answer": 3
  },
  {
    "Id": 441,
    "question": "In which structural design pattern does an interface bridge the gap between different implementations?",
    "optionList": [
      "Adapter",
      "Bridge",
      "Composite",
      "Facade"
    ],
    "answer": 1
  },
  {
    "Id": 442,
    "question": "Which structural design pattern provides a surrogate or placeholder for another object to control access to it?",
    "optionList": [
      "Adapter",
      "Bridge",
      "Composite",
      "Proxy"
    ],
    "answer": 3
  },
  {
    "Id": 443,
    "question": "Which behavioral design pattern defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically?",
    "optionList": [
      "Observer",
      "Strategy",
      "Command",
      "Iterator"
    ],
    "answer": 0
  },
  {
    "Id": 444,
    "question": "In which behavioral design pattern do algorithms vary independently of the clients that use them?",
    "optionList": [
      "Observer",
      "Strategy",
      "Command",
      "Iterator"
    ],
    "answer": 1
  },
  {
    "Id": 445,
    "question": "Which behavioral design pattern encapsulates a request as an object, thereby allowing parameterization of clients with queues, requests, and operations?",
    "optionList": [
      "Observer",
      "Strategy",
      "Command",
      "Iterator"
    ],
    "answer": 2
  },
  {
    "Id": 446,
    "question": "Which behavioral design pattern allows sequential access to the elements of an aggregate object without exposing its underlying representation?",
    "optionList": [
      "Observer",
      "Strategy",
      "Command",
      "Iterator"
    ],
    "answer": 3
  },
  {
    "Id": 447,
    "question": "In which behavioral design pattern do subclasses decide how to implement the steps of an algorithm?",
    "optionList": [
      "Observer",
      "Strategy",
      "Command",
      "Template Method"
    ],
    "answer": 3
  },
  {
    "Id": 448,
    "question": "Which behavioral design pattern is used to separate an algorithm's structure from its implementation, enabling them to vary independently?",
    "optionList": [
      "Observer",
      "Strategy",
      "Command",
      "Visitor"
    ],
    "answer": 1
  },
  {
    "Id": 449,
    "question": "Which behavioral design pattern allows for adding new operations to an object structure without modifying it?",
    "optionList": [
      "Observer",
      "Strategy",
      "Command",
      "Visitor"
    ],
    "answer": 3
  },
  {
    "Id": 450,
    "question": "In which behavioral design pattern does an object represent an operation to be performed on the elements of an object structure?",
    "optionList": [
      "Observer",
      "Strategy",
      "Command",
      "Visitor"
    ],
    "answer": 2
  },
  {
    "Id": 451,
    "question": "Which creational design pattern is commonly used to create objects without specifying the exact class of object that will be created?",
    "optionList": [
      "Factory",
      "Singleton",
      "Builder",
      "Prototype"
    ],
    "answer": 0
  },
  {
    "Id": 452,
    "question": "Which creational design pattern ensures that a class has only one instance and provides a global point of access to it, but with lazy initialization?",
    "optionList": [
      "Factory",
      "Singleton",
      "Builder",
      "Prototype"
    ],
    "answer": 1
  },
  {
    "Id": 453,
    "question": "Which creational design pattern is useful when the construction of an object is complicated and involves multiple steps?",
    "optionList": [
      "Factory",
      "Singleton",
      "Builder",
      "Prototype"
    ],
    "answer": 2
  },
  {
    "Id": 454,
    "question": "In which creational design pattern do new objects get created by copying an existing object, known as the prototype?",
    "optionList": [
      "Factory",
      "Singleton",
      "Builder",
      "Prototype"
    ],
    "answer": 3
  },
  {
    "Id": 455,
    "question": "Which structural design pattern is used to allow objects with incompatible interfaces to collaborate?",
    "optionList": [
      "Adapter",
      "Bridge",
      "Composite",
      "Decorator"
    ],
    "answer": 0
  },
  {
    "Id": 456,
    "question": "In which structural design pattern does a single interface represent an entire subsystem, providing a higher-level interface that makes the subsystem easier to use?",
    "optionList": [
      "Adapter",
      "Bridge",
      "Composite",
      "Facade"
    ],
    "answer": 3
  },
  {
    "Id": 457,
    "question": "Which SOLID principle emphasizes that a class should have only one reason to change?",
    "optionList": [
      "Single Responsibility Principle (SRP)",
      "Open/Closed Principle (OCP)",
      "Liskov Substitution Principle (LSP)",
      "Interface Segregation Principle (ISP)"
    ],
    "answer": 0
  },
  {
    "Id": 458,
    "question": "The Single Responsibility Principle (SRP) suggests that a class should have:",
    "optionList": [
      "Multiple responsibilities.",
      "No responsibilities.",
      "Only one responsibility.",
      "A primary and a secondary responsibility."
    ],
    "answer": 2
  },
  {
    "Id": 459,
    "question": "The Open/Closed Principle (OCP) encourages:",
    "optionList": [
      "Modifying existing code frequently.",
      "Adding new functionality by changing existing code.",
      "Designing classes that are open for extension but closed for modification.",
      "Having a single reason to change."
    ],
    "answer": 2
  },
  {
    "Id": 460,
    "question": "The Liskov Substitution Principle (LSP) ensures that:",
    "optionList": [
      "Derived classes can be used interchangeably with their base classes.",
      "Base classes should always be used instead of derived classes.",
      "Derived classes must have the same methods as their base classes.",
      "Inheritance hierarchies should be avoided."
    ],
    "answer": 0
  },
  {
    "Id": 461,
    "question": "Interface Segregation Principle (ISP) states that:",
    "optionList": [
      "Interfaces should be designed based on implementation details.",
      "Classes should not be dependent on interfaces.",
      "Clients should not be forced to implement interfaces they do not use.",
      "Interfaces should contain only one method."
    ],
    "answer": 2
  },
  {
    "Id": 462,
    "question": "Which principle suggests that high-level modules should not depend on low-level modules; both should depend on abstractions?",
    "optionList": [
      "Single Responsibility Principle (SRP)",
      "Open/Closed Principle (OCP)",
      "Liskov Substitution Principle (LSP)",
      "Dependency Inversion Principle (DIP)"
    ],
    "answer": 3
  },
  {
    "Id": 463,
    "question": "Which SOLID principle is violated if a subclass cannot substitute its parent class without altering the behavior of the program?",
    "optionList": [
      "Single Responsibility Principle (SRP)",
      "Open/Closed Principle (OCP)",
      "Liskov Substitution Principle (LSP)",
      "Interface Segregation Principle (ISP)"
    ],
    "answer": 2
  },
  {
    "Id": 464,
    "question": "What is the main benefit of following the Single Responsibility Principle (SRP)?",
    "optionList": [
      "Code becomes more complex.",
      "Code becomes less reusable.",
      "Classes become less cohesive.",
      "Code becomes easier to understand and maintain."
    ],
    "answer": 3
  },
  {
    "Id": 465,
    "question": "Which SOLID principle helps in reducing coupling between classes?",
    "optionList": [
      "Single Responsibility Principle (SRP)",
      "Open/Closed Principle (OCP)",
      "Liskov Substitution Principle (LSP)",
      "Dependency Inversion Principle (DIP)"
    ],
    "answer": 3
  },
  {
    "Id": 466,
    "question": "The Dependency Inversion Principle (DIP) suggests that:",
    "optionList": [
      "Classes should have only one responsibility.",
      "High-level modules should not depend on low-level modules; both should depend on abstractions.",
      "Interfaces should be designed based on client needs.",
      "Derived classes should be substitutable for their base classes."
    ],
    "answer": 1
  },
  {
    "Id": 467,
    "question": "Which SOLID principle advocates for designing smaller, focused classes?",
    "optionList": [
      "Single Responsibility Principle (SRP)",
      "Open/Closed Principle (OCP)",
      "Liskov Substitution Principle (LSP)",
      "Interface Segregation Principle (ISP)"
    ],
    "answer": 0
  },
  {
    "Id": 468,
    "question": "The Open/Closed Principle (OCP) states that classes should be:",
    "optionList": [
      "Closed for extension and modification.",
      "Open for extension but closed for modification.",
      "Open for modification but closed for extension.",
      "Closed for extension but open for modification."
    ],
    "answer": 1
  },
  {
    "Id": 469,
    "question": "In the context of SOLID principles, what does \"closed for modification\" mean?",
    "optionList": [
      "Classes cannot be extended.",
      "Existing classes cannot be modified.",
      "Existing code should not be changed.",
      "Existing code should be refactored frequently."
    ],
    "answer": 2
  },
  {
    "Id": 470,
    "question": "According to the Liskov Substitution Principle (LSP), if S is a subtype of T, then objects of type T may be replaced with objects of type S without affecting the correctness of the program. This statement is:",
    "optionList": [
      "True",
      "False",
      "None",
      "Not Applicable"
    ],
    "answer": 0
  },
  {
    "Id": 471,
    "question": "Which principle states that no client should be forced to depend on methods it does not use?",
    "optionList": [
      "Single Responsibility Principle (SRP)",
      "Open/Closed Principle (OCP)",
      "Liskov Substitution Principle (LSP)",
      "Interface Segregation Principle (ISP)"
    ],
    "answer": 3
  },
  {
    "Id": 472,
    "question": "What is the primary goal of the Single Responsibility Principle (SRP)?",
    "optionList": [
      "To ensure that a class has only one method.",
      "To ensure that a class has multiple responsibilities.",
      "To ensure that a class has only one reason to change.",
      "To ensure that a class has no responsibilities."
    ],
    "answer": 2
  },
  {
    "Id": 473,
    "question": "Which SOLID principle helps in making code more maintainable and reusable?",
    "optionList": [
      "Single Responsibility Principle (SRP)",
      "Open/Closed Principle (OCP)",
      "Liskov Substitution Principle (LSP)",
      "Dependency Inversion Principle (DIP)"
    ],
    "answer": 0
  },
  {
    "Id": 474,
    "question": "The Interface Segregation Principle (ISP) suggests that:",
    "optionList": [
      "Interfaces should contain only one method.",
      "Clients should depend on interfaces they do not use.",
      "Interfaces should be designed based on the needs of the client.",
      "Classes should be closed for extension but open for modification."
    ],
    "answer": 2
  },
  {
    "Id": 475,
    "question": "Which SOLID principle promotes the idea of designing classes that are open for extension but closed for modification?",
    "optionList": [
      "Single Responsibility Principle (SRP)",
      "Open/Closed Principle (OCP)",
      "Liskov Substitution Principle (LSP)",
      "Dependency Inversion Principle (DIP)"
    ],
    "answer": 1
  },
  {
    "Id": 476,
    "question": "Which SOLID principle advises against having classes with multiple reasons to change?",
    "optionList": [
      "Single Responsibility Principle (SRP)",
      "Open/Closed Principle (OCP)",
      "Liskov Substitution Principle (LSP)",
      "Interface Segregation Principle (ISP)"
    ],
    "answer": 0
  },
  {
    "Id": 477,
    "question": "The Open/Closed Principle (OCP) facilitates:",
    "optionList": [
      "Constant modification of existing classes.",
      "Extension of existing classes without altering their source code.",
      "Inheritance of implementation details from base classes.",
      "Tight coupling between classes."
    ],
    "answer": 1
  },
  {
    "Id": 478,
    "question": "Which SOLID principle focuses on ensuring that derived classes can be used interchangeably with their base classes?",
    "optionList": [
      "Single Responsibility Principle (SRP)",
      "Open/Closed Principle (OCP)",
      "Liskov Substitution Principle (LSP)",
      "Dependency Inversion Principle (DIP)"
    ],
    "answer": 2
  },
  {
    "Id": 479,
    "question": "What is the main purpose of the Interface Segregation Principle (ISP)?",
    "optionList": [
      "To ensure that interfaces contain only one method.",
      "To ensure that clients are forced to depend on all methods of an interface.",
      "To ensure that interfaces are designed based on the needs of the client.",
      "To ensure that classes are open for extension but closed for modification."
    ],
    "answer": 2
  },
  {
    "Id": 480,
    "question": "The Dependency Inversion Principle (DIP) helps in achieving:",
    "optionList": [
      "Tight coupling between classes.",
      "Loose coupling between classes.",
      "Dependence on concrete implementations.",
      "Direct dependency between high-level and low-level modules."
    ],
    "answer": 1
  },
  {
    "Id": 481,
    "question": "Which SOLID principle helps in avoiding situations where a change in one part of the system requires changes in multiple other parts?",
    "optionList": [
      "Single Responsibility Principle (SRP)",
      "Open/Closed Principle (OCP)",
      "Liskov Substitution Principle (LSP)",
      "Dependency Inversion Principle (DIP)"
    ],
    "answer": 0
  },
  {
    "Id": 482,
    "question": "The Interface Segregation Principle (ISP) promotes:",
    "optionList": [
      "Designing interfaces with only one method.",
      "Designing interfaces based on implementation details.",
      "Designing interfaces that are specific to the needs of the client.",
      "Designing interfaces with multiple unrelated methods."
    ],
    "answer": 2
  },
  {
    "Id": 483,
    "question": "According to the Single Responsibility Principle (SRP), a class should have only one reason to:",
    "optionList": [
      "Exist.",
      "Change.",
      "Be instantiated.",
      "Have multiple methods."
    ],
    "answer": 1
  },
  {
    "Id": 484,
    "question": "Which SOLID principle emphasizes the importance of designing classes that are open for extension but closed for modification?",
    "optionList": [
      "Single Responsibility Principle (SRP)",
      "Open/Closed Principle (OCP)",
      "Liskov Substitution Principle (LSP)",
      "Dependency Inversion Principle (DIP)"
    ],
    "answer": 1
  },
  {
    "Id": 485,
    "question": "The Liskov Substitution Principle (LSP) helps in maintaining:",
    "optionList": [
      "Tight coupling between classes.",
      "Loose coupling between classes.",
      "Dependency on concrete implementations.",
      "Compatibility between base and derived classes."
    ],
    "answer": 3
  },
  {
    "Id": 486,
    "question": "What is the main goal of the Dependency Inversion Principle (DIP)?",
    "optionList": [
      "To promote tight coupling between classes.",
      "To prevent loose coupling between classes.",
      "To ensure that high-level modules depend on low-level modules.",
      "To ensure that high-level modules do not depend on low-level modules; both should depend on abstractions."
    ],
    "answer": 3
  },
  {
    "Id": 487,
    "question": "According to the Interface Segregation Principle (ISP), what should happen if an interface becomes too large and complex?",
    "optionList": [
      "It should be split into multiple smaller interfaces.",
      "It should be used as it is.",
      "It should be combined with other interfaces.",
      "It should be abandoned."
    ],
    "answer": 0
  },
  {
    "Id": 488,
    "question": "Which SOLID principle helps in reducing the risk of introducing bugs when making changes to the code?",
    "optionList": [
      "Single Responsibility Principle (SRP)",
      "Open/Closed Principle (OCP)",
      "Liskov Substitution Principle (LSP)",
      "Dependency Inversion Principle (DIP)"
    ],
    "answer": 0
  },
  {
    "Id": 489,
    "question": "The Open/Closed Principle (OCP) suggests that classes should be designed in a way that allows:",
    "optionList": [
      "Easy modification of existing code.",
      "Frequent changes to the existing code.",
      "Extension of functionality without altering existing code.",
      "Tight coupling between classes."
    ],
    "answer": 2
  },
  {
    "Id": 490,
    "question": "According to the Liskov Substitution Principle (LSP), objects of a superclass should be replaceable with objects of a subclass without affecting the:",
    "optionList": [
      "Functionality of the subclass.",
      "Interface of the superclass.",
      "Functionality of the superclass.",
      "Interface of the subclass."
    ],
    "answer": 2
  },
  {
    "Id": 491,
    "question": "Which SOLID principle advocates for designing interfaces that are specific to the needs of the client?",
    "optionList": [
      "Single Responsibility Principle (SRP)",
      "Open/Closed Principle (OCP)",
      "Liskov Substitution Principle (LSP)",
      "Interface Segregation Principle (ISP)"
    ],
    "answer": 3
  },
  {
    "Id": 492,
    "question": "What is the main objective of the Interface Segregation Principle (ISP)?",
    "optionList": [
      "To ensure that interfaces contain only one method.",
      "To ensure that clients depend on interfaces they do not use.",
      "To ensure that interfaces are designed based on the needs of the client.",
      "To ensure that classes are closed for extension but open for modification."
    ],
    "answer": 2
  },
  {
    "Id": 493,
    "question": "Which SOLID principle suggests that a class should have only one reason to change?",
    "optionList": [
      "Single Responsibility Principle (SRP)",
      "Open/Closed Principle (OCP)",
      "Liskov Substitution Principle (LSP)",
      "Dependency Inversion Principle (DIP)"
    ],
    "answer": 0
  },
  {
    "Id": 494,
    "question": "The Open/Closed Principle (OCP) promotes:",
    "optionList": [
      "Frequent modification of existing code.",
      "Extension of existing classes without altering their source code.",
      "Tight coupling between classes.",
      "Direct dependency between high-level and low-level modules."
    ],
    "answer": 1
  },
  {
    "Id": 495,
    "question": "According to the Liskov Substitution Principle (LSP), derived classes should:",
    "optionList": [
      "Inherit implementation details from their base classes.",
      "Have fewer methods than their base classes.",
      "Be substitutable for their base classes without affecting the correctness of the program.",
      "Have a tighter coupling with the client code."
    ],
    "answer": 2
  },
  {
    "Id": 496,
    "question": "Which SOLID principle promotes designing classes with a single, well-defined responsibility?",
    "optionList": [
      "Single Responsibility Principle (SRP)",
      "Open/Closed Principle (OCP)",
      "Liskov Substitution Principle (LSP)",
      "Interface Segregation Principle (ISP)"
    ],
    "answer": 0
  },
  {
    "Id": 497,
    "question": "What does the Single Responsibility Principle (SRP) state?",
    "optionList": [
      "A class should have only one method.",
      "A class should have only one responsibility.",
      "A class should be responsible for multiple unrelated tasks.",
      "A class should have no responsibilities."
    ],
    "answer": 1
  },
  {
    "Id": 498,
    "question": "Which SOLID principle suggests that software entities should be open for extension but closed for modification?",
    "optionList": [
      "Single Responsibility Principle (SRP)",
      "Open/Closed Principle (OCP)",
      "Liskov Substitution Principle (LSP)",
      "Interface Segregation Principle (ISP)"
    ],
    "answer": 1
  },
  {
    "Id": 499,
    "question": "What is the main idea behind the Liskov Substitution Principle (LSP)?",
    "optionList": [
      "Derived classes must be substitutable for their base classes without altering the correctness of the program.",
      "Classes should be open for extension but closed for modification.",
      "A class should have only one responsibility.",
      "High-level modules should not depend on low-level modules; both should depend on abstractions."
    ],
    "answer": 0
  },
  {
    "Id": 500,
    "question": "Which SOLID principle advocates for clients to not be forced to depend on interfaces they do not use?",
    "optionList": [
      "Single Responsibility Principle (SRP)",
      "Open/Closed Principle (OCP)",
      "Liskov Substitution Principle (LSP)",
      "Interface Segregation Principle (ISP)"
    ],
    "answer": 3
  },
  {
    "Id": 501,
    "question": "What does the Dependency Inversion Principle (DIP) propose?",
    "optionList": [
      "High-level modules should not depend on low-level modules; both should depend on abstractions.",
      "A class should have only one responsibility.",
      "Software entities should be open for extension but closed for modification.",
      "Derived classes must be substitutable for their base classes without altering the correctness of the program."
    ],
    "answer": 0
  },
  {
    "Id": 502,
    "question": "Which SOLID principle encourages the design of smaller, focused classes that are easier to understand and maintain?",
    "optionList": [
      "Single Responsibility Principle (SRP)",
      "Open/Closed Principle (OCP)",
      "Liskov Substitution Principle (LSP)",
      "Interface Segregation Principle (ISP)"
    ],
    "answer": 0
  },
  {
    "Id": 503,
    "question": "The Open/Closed Principle (OCP) promotes which of the following?",
    "optionList": [
      "Encapsulation of behavior within classes.",
      "Classes should be open for modification and extension.",
      "A class should have only one responsibility.",
      "High-level modules should not depend on low-level modules; both should depend on abstractions."
    ],
    "answer": 1
  },
  {
    "Id": 504,
    "question": "In the context of SOLID principles, what does \"open for extension but closed for modification\" mean?",
    "optionList": [
      "Classes should have only one reason to change.",
      "Derived classes should be substitutable for their base classes.",
      "Software entities should be designed to allow new functionality to be added with minimal changes to existing code.",
      "High-level modules should not depend on low-level modules; both should depend on abstractions."
    ],
    "answer": 2
  },
  {
    "Id": 505,
    "question": "The Single Responsibility Principle (SRP) suggests that a class should have only one reason to:",
    "optionList": [
      "Exist.",
      "Change.",
      "Be instantiated.",
      "Have multiple methods."
    ],
    "answer": 1
  },
  {
    "Id": 506,
    "question": "According to the Open/Closed Principle (OCP), what should be open for extension but closed for modification?",
    "optionList": [
      "Classes.",
      "Methods.",
      "Variables.",
      "Constructors."
    ],
    "answer": 0
  },
  {
    "Id": 507,
    "question": "The Liskov Substitution Principle (LSP) ensures that objects of a superclass can be replaced with objects of a subclass without affecting the:",
    "optionList": [
      "Functionality of the superclass.",
      "Functionality of the subclass.",
      "Interface of the superclass.",
      "Interface of the subclass."
    ],
    "answer": 0
  },
  {
    "Id": 508,
    "question": "The Dependency Inversion Principle (DIP) suggests that high-level modules should not depend on low-level modules; both should depend on:",
    "optionList": [
      "Concrete implementations.",
      "Each other.",
      "Abstractions.",
      "Interface implementations."
    ],
    "answer": 2
  },
  {
    "Id": 509,
    "question": "What keyword is used to initiate exception handling in Java?",
    "optionList": [
      "try",
      "catch",
      "throw",
      "finally"
    ],
    "answer": 0
  },
  {
    "Id": 510,
    "question": "Which block is used to handle exceptions in Java?",
    "optionList": [
      "try",
      "catch",
      "finally",
      "throw"
    ],
    "answer": 1
  },
  {
    "Id": 511,
    "question": "Which keyword is used to explicitly throw an exception in Java?",
    "optionList": [
      "try",
      "catch",
      "throw",
      "finally"
    ],
    "answer": 2
  },
  {
    "Id": 512,
    "question": "What is the purpose of the `finally` block in Java exception handling?",
    "optionList": [
      "To catch exceptions.",
      "To throw exceptions.",
      "To ensure code execution whether an exception occurs or not.",
      "To define custom exception classes."
    ],
    "answer": 2
  },
  {
    "Id": 513,
    "question": "Which of the following is NOT an Exception class in Java?",
    "optionList": [
      "NullPointerException",
      "ArrayIndexOutOfBoundsException",
      "StringIndexOutOfBoundsException",
      "MathException"
    ],
    "answer": 3
  },
  {
    "Id": 514,
    "question": "What is the purpose of custom exception handling in Java?",
    "optionList": [
      "To handle built-in exceptions more effectively.",
      "To create user-defined exceptions.",
      "To catch exceptions more efficiently.",
      "To avoid using try-catch blocks."
    ],
    "answer": 1
  },
  {
    "Id": 515,
    "question": "Which keyword is used to create a custom exception class in Java?",
    "optionList": [
      "try",
      "catch",
      "throw",
      "class"
    ],
    "answer": 3
  },
  {
    "Id": 516,
    "question": "In Java, how can you define a custom exception class?",
    "optionList": [
      "By extending the RuntimeException class.",
      "By implementing the Exception interface.",
      "By extending the Exception class.",
      "By using the @CustomException annotation."
    ],
    "answer": 2
  },
  {
    "Id": 517,
    "question": "Which block is used to execute code after catching an exception in Java?",
    "optionList": [
      "try",
      "catch",
      "finally",
      "throw"
    ],
    "answer": 2
  },
  {
    "Id": 518,
    "question": "What happens if an exception is thrown from within a `finally` block in Java?",
    "optionList": [
      "The exception is caught by the catch block.",
      "The exception is propagated up the call stack.",
      "The finally block terminates immediately.",
      "The exception is ignored."
    ],
    "answer": 1
  },
  {
    "Id": 519,
    "question": "What is the purpose of the `throws` keyword in Java?",
    "optionList": [
      "To declare checked exceptions.",
      "To declare unchecked exceptions.",
      "To throw exceptions explicitly.",
      "To catch exceptions."
    ],
    "answer": 0
  },
  {
    "Id": 520,
    "question": "Which of the following statements about the try-catch-finally block is true?",
    "optionList": [
      "The finally block must be followed by the catch block.",
      "The finally block is optional.",
      "The catch block must be followed by the finally block.",
      "The try block must be followed by the catch or finally block."
    ],
    "answer": 3
  },
  {
    "Id": 521,
    "question": "What happens if an exception occurs within a try block and there is no corresponding catch block?",
    "optionList": [
      "The exception is ignored.",
      "The finally block is executed.",
      "The program terminates.",
      "The exception is caught by the JVM."
    ],
    "answer": 2
  },
  {
    "Id": 522,
    "question": "Which keyword is used to rethrow an exception in Java?",
    "optionList": [
      "rethrow",
      "throw",
      "throwAgain",
      "rethrowException"
    ],
    "answer": 1
  },
  {
    "Id": 523,
    "question": "Which statement is true about checked exceptions in Java?",
    "optionList": [
      "Checked exceptions are always caught at compile time.",
      "Checked exceptions must be handled using try-catch or declared with throws.",
      "Checked exceptions are subclasses of RuntimeException.",
      "Checked exceptions are always caught by the JVM."
    ],
    "answer": 1
  },
  {
    "Id": 524,
    "question": "What is the difference between checked and unchecked exceptions in Java?",
    "optionList": [
      "Checked exceptions are caught at runtime, while unchecked exceptions are caught at compile time.",
      "Checked exceptions must be explicitly caught or declared, while unchecked exceptions do not need to be.",
      "Checked exceptions are subclasses of RuntimeException, while unchecked exceptions are not.",
      "Checked exceptions are thrown by the JVM, while unchecked exceptions are thrown by user code."
    ],
    "answer": 1
  },
  {
    "Id": 525,
    "question": "Which of the following is a checked exception in Java?",
    "optionList": [
      "NullPointerException",
      "ArrayIndexOutOfBoundsException",
      "FileNotFoundException",
      "IllegalArgumentException"
    ],
    "answer": 2
  },
  {
    "Id": 526,
    "question": "In Java, can a catch block catch multiple exceptions?",
    "optionList": [
      "Yes, using a single catch block.",
      "No, each catch block can only catch one type of exception.",
      "Yes, by specifying multiple catch blocks.",
      "No, it is not possible to catch multiple exceptions in Java."
    ],
    "answer": 2
  },
  {
    "Id": 527,
    "question": "When is a finally block executed in Java exception handling?",
    "optionList": [
      "Before the try block.",
      "After the catch block, if an exception occurs.",
      "After the try block, regardless of whether an exception occurs or not.",
      "Only if the catch block is missing."
    ],
    "answer": 2
  },
  {
    "Id": 528,
    "question": "Which of the following is true about the throw keyword in Java?",
    "optionList": [
      "It is used to declare an exception.",
      "It is used to catch an exception.",
      "It is used to explicitly throw an exception.",
      "It is used to define a custom exception class."
    ],
    "answer": 2
  },
  {
    "Id": 529,
    "question": "Which statement about unchecked exceptions in Java is correct?",
    "optionList": [
      "Unchecked exceptions must be caught using try-catch blocks.",
      "Unchecked exceptions are always subclasses of RuntimeException.",
      "Unchecked exceptions must be declared with the throws keyword.",
      "Unchecked exceptions are always caught by the JVM."
    ],
    "answer": 1
  },
  {
    "Id": 530,
    "question": "What happens if an exception occurs within a try block and there is no corresponding catch block in Java?",
    "optionList": [
      "The exception is ignored.",
      "The finally block is executed.",
      "The program terminates.",
      "The exception is caught by the JVM."
    ],
    "answer": 2
  },
  {
    "Id": 531,
    "question": "What does the following Java code segment do?\\ntry {\\n       // Code that may throw an exception\\n    } catch (Exception e) {        System.out.println(\"An exception occurred: \" +e.getMessage());    } finally {\\n        System.out.println(\"Finally block executed.\");    }",
    "optionList": [
      "It catches any exceptions thrown within the try block and prints their messages.",
      "It catches any exceptions thrown within the try block and prints \"Finally block executed.\"",
      "It prints \"Finally block executed.\" regardless of whether an exception occurs or not.",
      "It prints \"An exception occurred: \" followed by the exception message, if an exception occurs."
    ],
    "answer": 2
  },
  {
    "Id": 532,
    "question": "Which of the following statements about checked exceptions in Java is true?",
    "optionList": [
      "Checked exceptions are always caught at compile time.",
      "Checked exceptions must be handled using try-catch or declared with throws.",
      "Checked exceptions are subclasses of RuntimeException.",
      "Checked exceptions are always caught by the JVM."
    ],
    "answer": 1
  },
  {
    "Id": 533,
    "question": "What does the `finally` block do in Java exception handling?",
    "optionList": [
      "It catches exceptions thrown by the try block.",
      "It throws exceptions that occurred within the try block.",
      "It executes regardless of whether an exception occurred or not.",
      "It rethrows exceptions caught by the catch block."
    ],
    "answer": 2
  },
  {
    "Id": 534,
    "question": "Which statement regarding the `catch` block in Java exception handling is true?",
    "optionList": [
      "A try block can have multiple catch blocks.",
      "A catch block must always follow a finally block.",
      "A catch block can catch any exception type.",
      "A catch block can be used to throw exceptions."
    ],
    "answer": 0
  },
  {
    "Id": 535,
    "question": "What happens if an exception occurs within a `finally` block in Java?",
    "optionList": [
      "The exception is caught by the catch block.",
      "The exception is propagated up the call stack.",
      "The finally block terminates immediately.",
      "The exception is ignored."
    ],
    "answer": 1
  },
  {
    "Id": 536,
    "question": "Which of the following keywords is used to explicitly throw an exception in Java?",
    "optionList": [
      "try",
      "catch",
      "throw",
      "finally"
    ],
    "answer": 2
  },
  {
    "Id": 537,
    "question": "In Java, can a method have both a throws clause and a try-catch block?",
    "optionList": [
      "Yes, but it's not recommended.",
      "No, it's not allowed.",
      "Yes, it's mandatory for checked exceptions.",
      "No, only one of them is allowed."
    ],
    "answer": 0
  },
  {
    "Id": 538,
    "question": "What does the `throws` keyword indicate in Java method declaration?",
    "optionList": [
      "It indicates that the method throws an exception.",
      "It indicates that the method catches an exception.",
      "It indicates that the method may throw an exception.",
      "It indicates that the method catches all exceptions."
    ],
    "answer": 2
  },
  {
    "Id": 539,
    "question": "What is the main purpose of the `finally` block in Java exception handling?",
    "optionList": [
      "To catch exceptions.",
      "To throw exceptions.",
      "To ensure code execution whether an exception occurs or not.",
      "To define custom exception classes."
    ],
    "answer": 2
  },
  {
    "Id": 540,
    "question": "What is the difference between a checked exception and an unchecked exception in Java?",
    "optionList": [
      "Checked exceptions are subclasses of RuntimeException, while unchecked exceptions are not.",
      "Checked exceptions must be caught or declared, while unchecked exceptions do not need to be.",
      "Checked exceptions are always caught at runtime, while unchecked exceptions are always caught at compile time.",
      "Checked exceptions must be explicitly thrown, while unchecked exceptions are automatically thrown by the JVM."
    ],
    "answer": 1
  },
  {
    "Id": 541,
    "question": "What is the role of the `throws` keyword in Java?",
    "optionList": [
      "It indicates that a method may throw an exception.",
      "It indicates that a method must catch an exception.",
      "It indicates that a method may catch an exception.",
      "It indicates that a method must throw an exception."
    ],
    "answer": 0
  },
  {
    "Id": 542,
    "question": "Which statement regarding custom exceptions in Java is true?",
    "optionList": [
      "Custom exceptions must always be subclasses of the Exception class.",
      "Custom exceptions must always be checked exceptions.",
      "Custom exceptions can be defined by extending any existing class.",
      "Custom exceptions are automatically handled by the JVM."
    ],
    "answer": 2
  },
  {
    "Id": 543,
    "question": "In Java, which block is used to handle exceptions that may occur during the execution of code?",
    "optionList": [
      "try",
      "catch",
      "finally",
      "throw"
    ],
    "answer": 1
  },
  {
    "Id": 544,
    "question": "What is the purpose of the `catch` block in Java exception handling?",
    "optionList": [
      "To define custom exception classes.",
      "To explicitly throw an exception.",
      "To handle exceptions that occur in the corresponding `try` block.",
      "To execute code after the completion of a `try` block."
    ],
    "answer": 2
  },
  {
    "Id": 545,
    "question": "Which of the following statements about the `finally` block in Java is true?",
    "optionList": [
      "The `finally` block is executed only if an exception occurs in the `try` block.",
      "The `finally` block is executed only if an exception is caught by the `catch` block.",
      "The `finally` block is executed regardless of whether an exception occurs or not.",
      "The `finally` block is optional and may be omitted."
    ],
    "answer": 2
  },
  {
    "Id": 546,
    "question": "What does the `throws` keyword indicate in a Java method signature?",
    "optionList": [
      "It indicates that the method may throw an exception.",
      "It indicates that the method must catch an exception.",
      "It indicates that the method may catch an exception.",
      "It indicates that the method must throw an exception."
    ],
    "answer": 0
  },
  {
    "Id": 547,
    "question": "Which statement is true about custom exception classes in Java?",
    "optionList": [
      "Custom exception classes must always extend the RuntimeException class.",
      "Custom exception classes must always be declared with the `throws` keyword.",
      "Custom exception classes must always implement the Exception interface.",
      "Custom exception classes can be defined by extending the Exception class."
    ],
    "answer": 3
  },
  {
    "Id": 548,
    "question": "In Java, when is a `finally` block executed in relation to the `try` and `catch` blocks?",
    "optionList": [
      "Before the `try` block.",
      "After the `try` block, regardless of whether an exception occurred or not.",
      "After the `catch` block, if an exception occurred.",
      "Only if the `catch` block is missing."
    ],
    "answer": 1
  },
  {
    "Id": 549,
    "question": "Which of the following statements about the `throw` keyword in Java is correct?",
    "optionList": [
      "It is used to define custom exception classes.",
      "It is used to explicitly catch an exception.",
      "It is used to rethrow an exception caught by a `catch` block.",
      "It is used to terminate the execution of a program."
    ],
    "answer": 2
  },
  {
    "Id": 550,
    "question": "In Java, which block is used to execute cleanup code regardless of whether an exception occurred or not?",
    "optionList": [
      "try",
      "catch",
      "finally",
      "throw"
    ],
    "answer": 2
  },
  {
    "Id": 551,
    "question": "Which object-oriented design principle emphasizes hiding the implementation details of a class and only exposing necessary functionalities?",
    "optionList": [
      "Encapsulate What Varies",
      "Favor Composition Over Inheritance",
      "Program to Interfaces, Not Implementations",
      "Strive for Loose Coupling"
    ],
    "answer": 0
  },
  {
    "Id": 552,
    "question": "In the context of object-oriented design, what does \"favor composition over inheritance\" mean?",
    "optionList": [
      "Prioritize using inheritance to establish relationships between classes.",
      "Prioritize using composition to build complex objects from simpler ones.",
      "Prioritize using polymorphism to achieve flexibility.",
      "Prioritize using interfaces to define contracts."
    ],
    "answer": 1
  },
  {
    "Id": 553,
    "question": "Which design principle suggests that classes should depend on interfaces rather than concrete implementations?",
    "optionList": [
      "Encapsulate What Varies",
      "Favor Composition Over Inheritance",
      "Program to Interfaces, Not Implementations",
      "Strive for Loose Coupling"
    ],
    "answer": 2
  },
  {
    "Id": 554,
    "question": "What does \"strive for loose coupling\" mean in object-oriented design?",
    "optionList": [
      "Minimize the interactions between classes.",
      "Maximize the dependencies between classes.",
      "Tighten the connections between components.",
      "Simplify the inheritance hierarchy."
    ],
    "answer": 0
  },
  {
    "Id": 555,
    "question": "Which design principle promotes the concept of providing dependencies to a component from external sources rather than creating them within the component itself?",
    "optionList": [
      "Encapsulate What Varies",
      "Favor Composition Over Inheritance",
      "Program to Interfaces, Not Implementations",
      "Dependency Injection"
    ],
    "answer": 3
  },
  {
    "Id": 556,
    "question": "How does encapsulation contribute to better object-oriented design?",
    "optionList": [
      "By minimizing the use of inheritance.",
      "By reducing the coupling between classes.",
      "By hiding the implementation details of a class.",
      "By promoting the use of concrete implementations."
    ],
    "answer": 2
  },
  {
    "Id": 557,
    "question": "In which scenario would using composition be more advantageous than inheritance?",
    "optionList": [
      "When creating a subtype that needs to override multiple methods of the parent class.",
      "When creating a subtype that has a \"is-a\" relationship with the parent class.",
      "When creating a complex object by assembling simpler objects.",
      "When creating a subtype that requires access to protected members of the parent class."
    ],
    "answer": 2
  },
  {
    "Id": 558,
    "question": "Which principle suggests designing classes in a way that they depend on abstractions rather than concrete implementations?",
    "optionList": [
      "Encapsulate What Varies",
      "Favor Composition Over Inheritance",
      "Program to Interfaces, Not Implementations",
      "Strive for Loose Coupling"
    ],
    "answer": 2
  },
  {
    "Id": 559,
    "question": "What is a key advantage of loose coupling in software design?",
    "optionList": [
      "It allows for easier modification and maintenance of code.",
      "It increases the complexity of interactions between classes.",
      "It results in tighter integration between components.",
      "It limits the flexibility of the system."
    ],
    "answer": 0
  },
  {
    "Id": 560,
    "question": "Which of the following is NOT a benefit of using dependency injection in object-oriented design?",
    "optionList": [
      "Increased modularity and testability",
      "Reduced coupling between components",
      "Improved performance of the application",
      "Enhanced flexibility and maintainability"
    ],
    "answer": 2
  },
  {
    "Id": 561,
    "question": "What is the main drawback of relying heavily on inheritance in object-oriented design?",
    "optionList": [
      "It can lead to tightly coupled classes.",
      "It makes the code harder to understand and maintain.",
      "It increases the risk of code duplication.",
      "It limits the reusability of the code."
    ],
    "answer": 1
  },
  {
    "Id": 562,
    "question": "Which design principle advises against tightly coupling classes and components together?",
    "optionList": [
      "Encapsulate What Varies",
      "Favor Composition Over Inheritance",
      "Program to Interfaces, Not Implementations",
      "Strive for Loose Coupling"
    ],
    "answer": 3
  },
  {
    "Id": 563,
    "question": "When applying the \"encapsulate what varies\" principle, what aspect of a class is encapsulated?",
    "optionList": [
      "Its public methods",
      "Its private methods",
      "Its implementation details that are likely to change",
      "Its static attributes"
    ],
    "answer": 2
  },
  {
    "Id": 564,
    "question": "Which of the following scenarios is a good candidate for using dependency injection?",
    "optionList": [
      "When a class has a large number of private methods.",
      "When a class needs to access static members of another class.",
      "When a class has dependencies that may change or vary.",
      "When a class relies heavily on inheritance for code reuse."
    ],
    "answer": 2
  },
  {
    "Id": 565,
    "question": "What is a common technique for implementing dependency injection in object-oriented design?",
    "optionList": [
      "Using static methods",
      "Using factory patterns",
      "Using inheritance",
      "Using global variables"
    ],
    "answer": 1
  },
  {
    "Id": 566,
    "question": "Which design principle promotes the idea of composing classes by assembling simpler objects rather than inheriting behavior from parent classes?",
    "optionList": [
      "Encapsulate What Varies",
      "Favor Composition Over Inheritance",
      "Program to Interfaces, Not Implementations",
      "Strive for Loose Coupling"
    ],
    "answer": 1
  },
  {
    "Id": 567,
    "question": "In the context of object-oriented design, what does \"encapsulate what varies\" mean?",
    "optionList": [
      "Hide the implementation details of a class.",
      "Define public interfaces for a class.",
      "Group similar functionalities together.",
      "Identify and encapsulate parts of the code that are likely to change."
    ],
    "answer": 3
  },
  {
    "Id": 568,
    "question": "Which design principle suggests that classes should depend on abstractions rather than concrete implementations?",
    "optionList": [
      "Encapsulate What Varies",
      "Favor Composition Over Inheritance",
      "Program to Interfaces, Not Implementations",
      "Strive for Loose Coupling"
    ],
    "answer": 2
  },
  {
    "Id": 569,
    "question": "What is one advantage of using composition over inheritance in object-oriented design?",
    "optionList": [
      "Composition allows for better code reuse.",
      "Composition simplifies the inheritance hierarchy.",
      "Composition reduces the complexity of the code.",
      "Composition promotes tighter coupling between classes."
    ],
    "answer": 1
  },
  {
    "Id": 570,
    "question": "Which design principle emphasizes designing classes to interact with each other through well-defined interfaces rather than directly accessing their implementations?",
    "optionList": [
      "Encapsulate What Varies",
      "Favor Composition Over Inheritance",
      "Program to Interfaces, Not Implementations",
      "Strive for Loose Coupling"
    ],
    "answer": 2
  },
  {
    "Id": 571,
    "question": "When following the principle of \"favor composition over inheritance,\" what is typically favored?",
    "optionList": [
      "Creating complex class hierarchies",
      "Reusing behavior through inheritance",
      "Assembling objects from simpler components",
      "Using static methods for code organization"
    ],
    "answer": 2
  },
  {
    "Id": 572,
    "question": "How does dependency injection help achieve loose coupling between classes?",
    "optionList": [
      "By directly accessing the implementations of dependencies",
      "By relying on inheritance for code reuse",
      "By providing dependencies from external sources rather than creating them internally",
      "By tightly coupling classes through static method calls"
    ],
    "answer": 2
  },
  {
    "Id": 573,
    "question": "Which design principle advocates designing classes and components to be easily replaceable with alternative implementations?",
    "optionList": [
      "Encapsulate What Varies",
      "Favor Composition Over Inheritance",
      "Program to Interfaces, Not Implementations",
      "Strive for Loose Coupling"
    ],
    "answer": 0
  },
  {
    "Id": 574,
    "question": "What is one drawback of tightly coupled classes in object-oriented design?",
    "optionList": [
      "They are difficult to understand and maintain.",
      "They promote better code organization.",
      "They encourage code duplication.",
      "They simplify unit testing."
    ],
    "answer": 0
  },
  {
    "Id": 575,
    "question": "Which principle suggests designing classes to have a single responsibility, i.e., only one reason to change?",
    "optionList": [
      "Encapsulate What Varies",
      "Favor Composition Over Inheritance",
      "Program to Interfaces, Not Implementations",
      "Single Responsibility Principle"
    ],
    "answer": 3
  },
  {
    "Id": 576,
    "question": "What is the primary goal of the Single Responsibility Principle (SRP) in object-oriented design?",
    "optionList": [
      "To minimize the use of inheritance",
      "To promote code reuse through composition",
      "To ensure that each class has only one reason to change",
      "To maximize the flexibility of the codebase"
    ],
    "answer": 2
  },
  {
    "Id": 577,
    "question": "Which design principle suggests that classes should be open for extension but closed for modification?",
    "optionList": [
      "Encapsulate What Varies",
      "Favor Composition Over Inheritance",
      "Open/Closed Principle",
      "Program to Interfaces, Not Implementations"
    ],
    "answer": 2
  },
  {
    "Id": 578,
    "question": "What is the main objective of the Open/Closed Principle (OCP) in object-oriented design?",
    "optionList": [
      "To minimize code duplication",
      "To ensure that classes have a single responsibility",
      "To allow classes to be extended without modifying their source code",
      "To promote code reuse through inheritance"
    ],
    "answer": 2
  },
  {
    "Id": 579,
    "question": "Which principle emphasizes designing classes to interact with each other through well-defined interfaces rather than directly accessing their implementations?",
    "optionList": [
      "Encapsulate What Varies",
      "Favor Composition Over Inheritance",
      "Program to Interfaces, Not Implementations",
      "Strive for Loose Coupling"
    ],
    "answer": 2
  },
  {
    "Id": 580,
    "question": "How does the Single Responsibility Principle (SRP) contribute to better object-oriented design?",
    "optionList": [
      "By reducing code duplication",
      "By promoting code reuse through inheritance",
      "By ensuring that each class has only one reason to change",
      "By allowing classes to be extended without modifying their source code"
    ],
    "answer": 2
  },
  {
    "Id": 581,
    "question": "Which design principle promotes the idea of designing classes to have a clear and specific purpose?",
    "optionList": [
      "Encapsulate What Varies",
      "Favor Composition Over Inheritance",
      "Single Responsibility Principle",
      "Strive for Loose Coupling"
    ],
    "answer": 2
  },
  {
    "Id": 582,
    "question": "What is the primary goal of the Open/Closed Principle (OCP) in object-oriented design?",
    "optionList": [
      "To minimize code duplication",
      "To ensure that classes have a single responsibility",
      "To allow classes to be extended without modifying their source code",
      "To promote code reuse through inheritance"
    ],
    "answer": 2
  },
  {
    "Id": 583,
    "question": "Which design principle suggests that classes should encapsulate the aspects that are likely to change?",
    "optionList": [
      "Encapsulate What Varies",
      "Favor Composition Over Inheritance",
      "Program to Interfaces, Not Implementations",
      "Strive for Loose Coupling"
    ],
    "answer": 0
  },
  {
    "Id": 584,
    "question": "What is the main objective of the \"Encapsulate What Varies\" principle in object-oriented design?",
    "optionList": [
      "To minimize code duplication",
      "To ensure that classes have a single responsibility",
      "To allow classes to be extended without modifying their source code",
      "To localize and manage changes within a class"
    ],
    "answer": 3
  },
  {
    "Id": 585,
    "question": "Which design principle suggests that inheritance should only be used when a true \"is-a\" relationship exists between classes?",
    "optionList": [
      "Encapsulate What Varies",
      "Favor Composition Over Inheritance",
      "Program to Interfaces, Not Implementations",
      "Strive for Loose Coupling"
    ],
    "answer": 1
  },
  {
    "Id": 586,
    "question": "What is the primary goal of the \"Favor Composition Over Inheritance\" principle in object-oriented design?",
    "optionList": [
      "To promote code reuse through inheritance",
      "To simplify the inheritance hierarchy",
      "To minimize the coupling between classes",
      "To create more flexible and maintainable designs"
    ],
    "answer": 3
  },
  {
    "Id": 587,
    "question": "Which design principle encourages designing classes to interact with each other through interfaces rather than concrete implementations?",
    "optionList": [
      "Encapsulate What Varies",
      "Favor Composition Over Inheritance",
      "Program to Interfaces, Not Implementations",
      "Strive for Loose Coupling"
    ],
    "answer": 2
  },
  {
    "Id": 588,
    "question": "How does programming to interfaces contribute to better object-oriented design?",
    "optionList": [
      "By promoting code reuse through inheritance",
      "By simplifying the implementation details of classes",
      "By allowing classes to interact through well-defined contracts",
      "By minimizing the use of polymorphism"
    ],
    "answer": 2
  },
  {
    "Id": 589,
    "question": "What is the primary goal of programming to interfaces rather than implementations?",
    "optionList": [
      "To promote code reuse through inheritance",
      "To simplify the implementation details of classes",
      "To allow for easier modification and testing of code",
      "To minimize the coupling between classes"
    ],
    "answer": 3
  },
  {
    "Id": 590,
    "question": "Which design principle advocates designing classes to have a clear and specific purpose?",
    "optionList": [
      "Encapsulate What Varies",
      "Favor Composition Over Inheritance",
      "Single Responsibility Principle",
      "Strive for Loose Coupling"
    ],
    "answer": 2
  },
  {
    "Id": 591,
    "question": "What is the main objective of the Single Responsibility Principle (SRP) in object-oriented design?",
    "optionList": [
      "To minimize code duplication",
      "To ensure that classes have a single responsibility",
      "To allow classes to be extended without modifying their source code",
      "To promote code reuse through inheritance"
    ],
    "answer": 1
  },
  {
    "Id": 592,
    "question": "What is an advantage of Object-Oriented Database Management Systems (OODBMS)?",
    "optionList": [
      "Limited support for complex data structures",
      "Difficulty in representing real-world entities",
      "Enhanced support for complex data structures and relationships",
      "Limited scalability compared to relational databases"
    ],
    "answer": 2
  },
  {
    "Id": 593,
    "question": "Which of the following best describes an object-oriented data model?",
    "optionList": [
      "It focuses on representing data in tables and rows.",
      "It organizes data into objects with attributes and methods.",
      "It uses SQL for data manipulation.",
      "It doesn't support inheritance or polymorphism."
    ],
    "answer": 1
  },
  {
    "Id": 594,
    "question": "What is Object-Relational Mapping (ORM) in the context of OODBMS?",
    "optionList": [
      "A technique for transforming object-oriented data into relational format",
      "A process for creating objects from relational databases",
      "A method for modeling relationships between objects in databases",
      "A feature that allows objects to communicate with each other"
    ],
    "answer": 0
  },
  {
    "Id": 595,
    "question": "Which of the following is an example of an Object-Oriented Database Management System?",
    "optionList": [
      "MySQL",
      "SQLite",
      "db4o",
      "MongoDB"
    ],
    "answer": 2
  },
  {
    "Id": 596,
    "question": "What is one advantage of using an Object-Oriented Database Management System (OODBMS) over a relational database?",
    "optionList": [
      "Better support for complex queries",
      "Improved scalability",
      "Reduced data redundancy",
      "Enhanced support for complex data structures and relationships"
    ],
    "answer": 3
  },
  {
    "Id": 597,
    "question": "Which of the following best describes the concept of an Object-Oriented Database Management System (OODBMS)?",
    "optionList": [
      "It stores data in a tabular format.",
      "It uses SQL for data manipulation.",
      "It organizes data into objects with attributes and methods.",
      "It lacks support for complex data structures."
    ],
    "answer": 2
  },
  {
    "Id": 598,
    "question": "What is a key characteristic of object-oriented data models in OODBMS?",
    "optionList": [
      "Relational representation of data",
      "Hierarchical structure",
      "Emphasis on encapsulation and inheritance",
      "Use of stored procedures for data manipulation"
    ],
    "answer": 2
  },
  {
    "Id": 599,
    "question": "Which of the following OODBMS is known for its Java integration and performance?",
    "optionList": [
      "db4o",
      "ObjectDB",
      "Versant ODBMS",
      "MySQL"
    ],
    "answer": 1
  },
  {
    "Id": 600,
    "question": "In the context of OODBMS, what does Object-Relational Mapping (ORM) aim to achieve?",
    "optionList": [
      "Converting object-oriented data into relational format",
      "Creating objects from relational databases",
      "Establishing relationships between objects in databases",
      "Ensuring data integrity in object-oriented databases"
    ],
    "answer": 0
  },
  {
    "Id": 601,
    "question": "Which of the following is a benefit of using an Object-Oriented Database Management System (OODBMS)?",
    "optionList": [
      "Reduced support for complex data structures",
      "Limited scalability compared to relational databases",
      "Improved performance for complex queries",
      "Decreased flexibility in data modeling"
    ],
    "answer": 2
  },
  {
    "Id": 602,
    "question": "Which aspect of OODBMS allows for seamless integration of object-oriented programming languages with databases?",
    "optionList": [
      "Object-relational mapping",
      "Hierarchical structure",
      "Object-oriented data models",
      "Query languages"
    ],
    "answer": 0
  },
  {
    "Id": 603,
    "question": "What is a notable feature of Object-Oriented Database Management Systems (OODBMS)?",
    "optionList": [
      "Relational data storage",
      "Support for ACID transactions",
      "Direct storage of objects without the need for mapping",
      "Use of SQL for data manipulation"
    ],
    "answer": 2
  },
  {
    "Id": 604,
    "question": "Which of the following statements is true regarding Object-Oriented Database Management Systems (OODBMS)?",
    "optionList": [
      "They store data in tables with rows and columns.",
      "They lack support for encapsulation and inheritance.",
      "They use SQL as the primary query language.",
      "They provide enhanced support for complex data structures."
    ],
    "answer": 3
  },
  {
    "Id": 605,
    "question": "Which OODBMS is known for its simplicity and ease of use in Java applications?",
    "optionList": [
      "db4o",
      "ObjectDB",
      "Versant ODBMS",
      "MongoDB"
    ],
    "answer": 0
  },
  {
    "Id": 606,
    "question": "What advantage do Object-Oriented Database Management Systems (OODBMS) offer in terms of modeling real-world entities?",
    "optionList": [
      "They lack support for encapsulation and inheritance.",
      "They provide a hierarchical data structure.",
      "They allow for direct representation of real-world objects with attributes and behaviors.",
      "They rely on SQL for data manipulation."
    ],
    "answer": 2
  },
  {
    "Id": 607,
    "question": "What is the primary focus of Object-Oriented Database Management Systems (OODBMS)?",
    "optionList": [
      "Storing data in a tabular format",
      "Ensuring data redundancy",
      "Organizing data into objects with attributes and methods",
      "Using stored procedures for data manipulation"
    ],
    "answer": 2
  },
  {
    "Id": 608,
    "question": "Which of the following is an advantage of using Object-Oriented Database Management Systems (OODBMS)?",
    "optionList": [
      "Limited scalability",
      "Reduced support for complex data structures",
      "Better representation of real-world entities",
      "Relational data storage"
    ],
    "answer": 2
  },
  {
    "Id": 609,
    "question": "Which of the following is a key concept of Object-Oriented Database Management Systems (OODBMS)?",
    "optionList": [
      "Storing data in a tabular format",
      "Relational data models",
      "Organizing data into objects with attributes and methods",
      "Using SQL for data manipulation"
    ],
    "answer": 2
  },
  {
    "Id": 610,
    "question": "What distinguishes Object-Oriented Database Management Systems (OODBMS) from traditional relational databases?",
    "optionList": [
      "Relational data storage",
      "Use of SQL as the primary query language",
      "Direct storage of objects without mapping",
      "Hierarchical data structure"
    ],
    "answer": 2
  },
  {
    "Id": 611,
    "question": "In the context of OODBMS, what is the purpose of Object-Relational Mapping (ORM)?",
    "optionList": [
      "To convert object-oriented data into relational format",
      "To create objects from relational databases",
      "To establish relationships between objects in databases",
      "To ensure data integrity in object-oriented databases"
    ],
    "answer": 0
  },
  {
    "Id": 612,
    "question": "What is the primary advantage of Object-Oriented Database Management Systems (OODBMS) over traditional relational databases?",
    "optionList": [
      "Support for complex queries",
      "Hierarchical data structure",
      "Direct storage of objects without mapping",
      "Limited scalability"
    ],
    "answer": 2
  },
  {
    "Id": 613,
    "question": "Which of the following statements about Object-Oriented Database Management Systems (OODBMS) is true?",
    "optionList": [
      "They lack support for complex data structures.",
      "They organize data into tables with rows and columns.",
      "They are not suitable for representing real-world entities.",
      "They offer better support for complex data structures and relationships."
    ],
    "answer": 3
  },
  {
    "Id": 614,
    "question": "Which term refers to the process of converting object-oriented data into a relational format in OODBMS?",
    "optionList": [
      "Object-relational mapping",
      "Object instantiation",
      "Inheritance",
      "Polymorphism"
    ],
    "answer": 0
  },
  {
    "Id": 615,
    "question": "Which OODBMS is known for its ability to seamlessly integrate with Java applications?",
    "optionList": [
      "db4o",
      "ObjectDB",
      "Versant ODBMS",
      "MongoDB"
    ],
    "answer": 1
  },
  {
    "Id": 616,
    "question": "What is one advantage of using an Object-Oriented Database Management System (OODBMS) for representing real-world entities?",
    "optionList": [
      "Limited support for complex data structures",
      "Enhanced scalability",
      "Direct representation of objects with attributes and behaviors",
      "Relational data storage"
    ],
    "answer": 2
  },
  {
    "Id": 617,
    "question": "In OODBMS, what is the primary focus of object-relational mapping (ORM)?",
    "optionList": [
      "Converting objects into relational tables",
      "Storing objects directly in relational databases",
      "Mapping object-oriented data to relational format",
      "Representing relationships between objects"
    ],
    "answer": 2
  },
  {
    "Id": 618,
    "question": "Which of the following OODBMS is known for its simplicity and lightweight design?",
    "optionList": [
      "db4o",
      "ObjectDB",
      "Versant ODBMS",
      "MongoDB"
    ],
    "answer": 0
  },
  {
    "Id": 619,
    "question": "What is a key feature of Object-Oriented Database Management Systems (OODBMS)?",
    "optionList": [
      "Relational data storage",
      "Use of SQL for data manipulation",
      "Direct storage of objects without mapping",
      "Limited support for complex data structures"
    ],
    "answer": 2
  },
  {
    "Id": 620,
    "question": "Which aspect of OODBMS allows for a more natural representation of real-world entities?",
    "optionList": [
      "Hierarchical data structure",
      "Direct storage of objects without mapping",
      "Relational data storage",
      "Use of SQL for data manipulation"
    ],
    "answer": 1
  },
  {
    "Id": 621,
    "question": "Which of the following best describes the concept of object-oriented data models in OODBMS?",
    "optionList": [
      "They represent data in tables with rows and columns.",
      "They organize data into objects with attributes and methods.",
      "They use SQL as the primary query language.",
      "They lack support for encapsulation and inheritance."
    ],
    "answer": 1
  },
  {
    "Id": 622,
    "question": "Which feature distinguishes Object-Oriented Database Management Systems (OODBMS) from traditional relational databases?",
    "optionList": [
      "Relational data storage",
      "Use of SQL as the primary query language",
      "Direct storage of objects without mapping",
      "Hierarchical data structure"
    ],
    "answer": 2
  },
  {
    "Id": 623,
    "question": "What is the primary purpose of Object-Relational Mapping (ORM) in the context of OODBMS?",
    "optionList": [
      "To convert object-oriented data into relational format",
      "To create objects from relational databases",
      "To establish relationships between objects in databases",
      "To ensure data integrity in object-oriented databases"
    ],
    "answer": 0
  },
  {
    "Id": 624,
    "question": "What is the primary purpose of unit testing in Object-Oriented Programming (OOP)?",
    "optionList": [
      "Testing the entire application as a whole",
      "Verifying the correctness of individual units or components",
      "Ensuring integration between different modules",
      "Identifying performance bottlenecks"
    ],
    "answer": 1
  },
  {
    "Id": 625,
    "question": "Integration testing in OOP involves:",
    "optionList": [
      "Testing individual components or units in isolation",
      "Verifying the interaction between different modules or subsystems",
      "Debugging techniques for identifying errors",
      "Testing for memory leaks"
    ],
    "answer": 1
  },
  {
    "Id": 626,
    "question": "Which of the following is a common debugging technique in OOP?",
    "optionList": [
      "Unit testing",
      "Integration testing",
      "Stepping through code with a debugger",
      "Writing comprehensive documentation"
    ],
    "answer": 2
  },
  {
    "Id": 627,
    "question": "Test-driven development (TDD) in OOP involves:",
    "optionList": [
      "Writing tests after the code implementation",
      "Writing code without any tests",
      "Writing tests before writing the actual code",
      "Ignoring testing altogether"
    ],
    "answer": 2
  },
  {
    "Id": 628,
    "question": "In unit testing, a \"unit\" typically refers to:",
    "optionList": [
      "The entire application",
      "A single class or method",
      "A collection of related classes",
      "The user interface components"
    ],
    "answer": 1
  },
  {
    "Id": 629,
    "question": "Integration testing focuses on:",
    "optionList": [
      "Testing individual units or components",
      "Verifying the interaction between different parts of the system",
      "Identifying syntax errors",
      "Assessing code coverage"
    ],
    "answer": 1
  },
  {
    "Id": 630,
    "question": "Which of the following is NOT a common debugging technique in OOP?",
    "optionList": [
      "Using print statements",
      "Stepping through code with a debugger",
      "Reading through documentation",
      "Writing comprehensive test cases"
    ],
    "answer": 3
  },
  {
    "Id": 631,
    "question": "Test-driven development (TDD) advocates for:",
    "optionList": [
      "Writing tests after the code implementation",
      "Writing code without any tests",
      "Writing tests before writing the actual code",
      "Ignoring testing altogether"
    ],
    "answer": 2
  },
  {
    "Id": 632,
    "question": "What is the primary focus of unit testing in OOP?",
    "optionList": [
      "Testing the entire application as a whole",
      "Verifying the interaction between different modules",
      "Ensuring integration between different components",
      "Testing individual units or components"
    ],
    "answer": 3
  },
  {
    "Id": 633,
    "question": "Integration testing in OOP is concerned with:",
    "optionList": [
      "Verifying the correctness of individual units or components",
      "Testing the interaction between different modules or subsystems",
      "Debugging syntax errors",
      "Assessing code coverage"
    ],
    "answer": 1
  },
  {
    "Id": 634,
    "question": "Which of the following statements best describes unit testing in Object-Oriented Programming (OOP)?",
    "optionList": [
      "It focuses on testing the integration between different modules.",
      "It verifies the correctness of individual units or components.",
      "It primarily deals with debugging syntax errors.",
      "It ensures the scalability of the application."
    ],
    "answer": 1
  },
  {
    "Id": 635,
    "question": "What is the main objective of integration testing in OOP?",
    "optionList": [
      "To debug individual components of the system.",
      "To verify the interaction between different parts of the system.",
      "To test the user interface components.",
      "To assess the performance of the system."
    ],
    "answer": 1
  },
  {
    "Id": 636,
    "question": "Which of the following is a commonly used debugging technique in OOP?",
    "optionList": [
      "System testing",
      "Code refactoring",
      "Stepping through code with a debugger",
      "Performance profiling"
    ],
    "answer": 2
  },
  {
    "Id": 637,
    "question": "What is the fundamental principle behind test-driven development (TDD) in OOP?",
    "optionList": [
      "Writing tests after the code implementation",
      "Writing code without any tests",
      "Writing tests before writing the actual code",
      "Ignoring testing altogether"
    ],
    "answer": 2
  },
  {
    "Id": 638,
    "question": "In unit testing, what does a \"unit\" typically refer to?",
    "optionList": [
      "The entire application",
      "A single class or method",
      "A collection of related classes",
      "The database schema"
    ],
    "answer": 1
  },
  {
    "Id": 639,
    "question": "Integration testing in OOP is primarily concerned with:",
    "optionList": [
      "Debugging individual units or components.",
      "Verifying the correctness of individual units.",
      "Testing the interaction between different parts of the system.",
      "Identifying performance bottlenecks."
    ],
    "answer": 2
  },
  {
    "Id": 640,
    "question": "What does test-driven development (TDD) advocate for in OOP?",
    "optionList": [
      "Writing tests after the code implementation",
      "Writing code without any tests",
      "Writing tests before writing the actual code",
      "Ignoring testing altogether"
    ],
    "answer": 2
  },
  {
    "Id": 641,
    "question": "Which of the following best describes code reusability in Object-Oriented Programming (OOP)?",
    "optionList": [
      "Writing code without any comments or documentation",
      "Designing classes and methods that can be used in multiple parts of an application",
      "Creating complex and tightly coupled code structures",
      "Ignoring the principles of inheritance and polymorphism"
    ],
    "answer": 1
  },
  {
    "Id": 642,
    "question": "Maintainability in OOP refers to:",
    "optionList": [
      "Writing code that cannot be easily understood by other developers",
      "Making changes to code without considering its long-term impact",
      "Designing code that is easy to modify, update, and extend",
      "Avoiding the use of design patterns and abstraction"
    ],
    "answer": 2
  },
  {
    "Id": 643,
    "question": "Scalability in OOP implies:",
    "optionList": [
      "Writing code that performs poorly under high loads",
      "Designing code that cannot handle an increase in data or user volume",
      "Creating code that can easily adapt and grow as the application requirements change",
      "Ignoring performance optimizations and efficient algorithms"
    ],
    "answer": 2
  },
  {
    "Id": 644,
    "question": "Which of the following is a commonly used design pattern for managing object creation?",
    "optionList": [
      "Observer pattern",
      "Singleton pattern",
      "Adapter pattern",
      "Strategy pattern"
    ],
    "answer": 1
  },
  {
    "Id": 645,
    "question": "Refactoring techniques in OOP involve:",
    "optionList": [
      "Writing code without any planning or design",
      "Modifying existing code to improve its readability, maintainability, and performance",
      "Avoiding changes to code once it has been written",
      "Ignoring code quality and consistency"
    ],
    "answer": 1
  },
  {
    "Id": 646,
    "question": "What is the purpose of code documentation and comments in OOP?",
    "optionList": [
      "To obfuscate the code and make it difficult to understand",
      "To provide additional information about the code's functionality and usage",
      "To increase code complexity and reduce readability",
      "To discourage other developers from working on the codebase"
    ],
    "answer": 1
  },
  {
    "Id": 647,
    "question": "Which of the following design patterns is used to decouple abstraction from implementation?",
    "optionList": [
      "Factory pattern",
      "Proxy pattern",
      "Bridge pattern",
      "Decorator pattern"
    ],
    "answer": 2
  },
  {
    "Id": 648,
    "question": "What does the Singleton pattern ensure in OOP?",
    "optionList": [
      "That only one instance of a class is created",
      "That multiple instances of a class are created",
      "That a class cannot be instantiated",
      "That a class cannot be inherited"
    ],
    "answer": 0
  },
  {
    "Id": 649,
    "question": "Which of the following is NOT a common design pattern in OOP?",
    "optionList": [
      "Observer pattern",
      "Singleton pattern",
      "Adapter pattern",
      "Iterative pattern"
    ],
    "answer": 3
  },
  {
    "Id": 650,
    "question": "What is the primary advantage of using design patterns in OOP?",
    "optionList": [
      "They make the code less maintainable",
      "They increase code complexity",
      "They provide proven solutions to common design problems",
      "They discourage code reusability"
    ],
    "answer": 2
  },
  {
    "Id": 651,
    "question": "Which of the following statements about code reusability is true?",
    "optionList": [
      "It leads to tighter coupling between classes",
      "It makes the code harder to maintain",
      "It encourages modular and flexible design",
      "It reduces the need for inheritance and polymorphism"
    ],
    "answer": 2
  },
  {
    "Id": 652,
    "question": "Maintainability in OOP refers to the ease with which:",
    "optionList": [
      "Code can be understood and modified",
      "Code can be optimized for performance",
      "Code can be reused in other applications",
      "Code can be obfuscated and hidden"
    ],
    "answer": 0
  },
  {
    "Id": 653,
    "question": "Scalability in OOP is concerned with:",
    "optionList": [
      "The ability of code to handle increasing amounts of data and users",
      "The speed at which code can be written and deployed",
      "The number of design patterns used in the code",
      "The number of comments and documentation lines in the code"
    ],
    "answer": 0
  },
  {
    "Id": 654,
    "question": "Which of the following design patterns is used to separate interface from implementation?",
    "optionList": [
      "Proxy pattern",
      "Adapter pattern",
      "Bridge pattern",
      "Decorator pattern"
    ],
    "answer": 2
  },
  {
    "Id": 655,
    "question": "The Singleton pattern is used when:",
    "optionList": [
      "Multiple instances of a class need to be created",
      "Only one instance of a class should exist",
      "Inheritance is required for a class",
      "Polymorphism is desired"
    ],
    "answer": 1
  },
  {
    "Id": 656,
    "question": "Refactoring techniques are used to:",
    "optionList": [
      "Write code without any comments or documentation",
      "Improve the internal structure of existing code without changing its external behavior",
      "Increase code complexity and reduce readability",
      "Avoid changes to code once it has been written"
    ],
    "answer": 1
  },
  {
    "Id": 657,
    "question": "Code documentation and comments are important in OOP because they:",
    "optionList": [
      "Make the code harder to understand",
      "Provide additional information about the code's functionality and usage",
      "Decrease code maintainability",
      "Encourage other developers to avoid working on the codebase"
    ],
    "answer": 1
  },
  {
    "Id": 658,
    "question": "Which design pattern is used to add new functionality to an object dynamically?",
    "optionList": [
      "Observer pattern",
      "Strategy pattern",
      "Decorator pattern",
      "Factory pattern"
    ],
    "answer": 2
  },
  {
    "Id": 659,
    "question": "What is the primary goal of code reusability in Object-Oriented Programming (OOP)?",
    "optionList": [
      "To increase code complexity",
      "To make code less maintainable",
      "To design classes and methods that can be used in multiple parts of an application",
      "To discourage the use of inheritance and polymorphism"
    ],
    "answer": 2
  },
  {
    "Id": 660,
    "question": "What does application architecture design primarily focus on in real-world OOP applications?",
    "optionList": [
      "Micro-optimizations within individual classes",
      "Designing the overall structure and organization of the software system",
      "Implementing low-level algorithms for specific tasks",
      "Ensuring code readability and documentation"
    ],
    "answer": 1
  },
  {
    "Id": 661,
    "question": "In the context of large-scale software development, what is a key consideration when applying OOP principles?",
    "optionList": [
      "Minimizing code reuse to avoid complexity",
      "Encapsulating all data within individual classes",
      "Managing dependencies and ensuring modular design",
      "Avoiding the use of design patterns to keep code simple"
    ],
    "answer": 2
  },
  {
    "Id": 662,
    "question": "What role do software design patterns play in real-world OOP applications?",
    "optionList": [
      "They introduce unnecessary complexity to the codebase",
      "They provide standardized solutions to common design problems",
      "They discourage code reusability and modularity",
      "They are only applicable in small-scale projects"
    ],
    "answer": 1
  },
  {
    "Id": 663,
    "question": "Designing for extensibility and modularity in OOP-based systems involves:",
    "optionList": [
      "Creating tightly coupled components to improve performance",
      "Avoiding inheritance and polymorphism to keep code simple",
      "Designing classes and modules that can be easily extended and modified",
      "Ignoring code documentation and comments to save time"
    ],
    "answer": 2
  },
  {
    "Id": 664,
    "question": "What are some performance considerations in OOP-based systems?",
    "optionList": [
      "Using as many design patterns as possible to optimize performance",
      "Prioritizing code readability over performance optimizations",
      "Minimizing method calls and avoiding unnecessary object creation",
      "Ignoring memory management and resource usage"
    ],
    "answer": 2
  },
  {
    "Id": 665,
    "question": "In OOP-based systems, what are some security considerations that need to be addressed?",
    "optionList": [
      "Ensuring data encapsulation to prevent unauthorized access",
      "Using only public access specifiers to make data accessible to everyone",
      "Ignoring input validation and error handling",
      "Avoiding the use of encryption and secure protocols"
    ],
    "answer": 0
  },
  {
    "Id": 666,
    "question": "Which of the following is a primary focus of application architecture design in real-world OOP applications?",
    "optionList": [
      "Micro-optimizations within individual classes",
      "Designing the overall structure and organization of the software system",
      "Implementing low-level algorithms for specific tasks",
      "Ensuring code readability and documentation"
    ],
    "answer": 1
  },
  {
    "Id": 667,
    "question": "In large-scale software development using OOP principles, what is essential for managing complexity?",
    "optionList": [
      "Tight coupling between modules",
      "Encapsulation of all data within classes",
      "Proper modularization and abstraction",
      "Avoidance of design patterns"
    ],
    "answer": 2
  },
  {
    "Id": 668,
    "question": "How do software design patterns contribute to the development of real-world OOP applications?",
    "optionList": [
      "By introducing unnecessary complexity",
      "By providing reusable solutions to common design problems",
      "By hindering code reusability and maintainability",
      "By promoting spaghetti code"
    ],
    "answer": 1
  },
  {
    "Id": 669,
    "question": "What is the significance of designing for extensibility and modularity in OOP-based systems?",
    "optionList": [
      "It makes the code more rigid and inflexible",
      "It encourages tight coupling between components",
      "It allows for easier maintenance and future enhancements",
      "It hampers code readability and understandability"
    ],
    "answer": 2
  },
  {
    "Id": 670,
    "question": "Which of the following is a crucial performance consideration in OOP-based systems?",
    "optionList": [
      "Maximizing method calls and object creation",
      "Prioritizing code complexity over performance optimizations",
      "Minimizing dependencies between classes",
      "Optimizing memory usage and reducing unnecessary overhead"
    ],
    "answer": 3
  },
  {
    "Id": 671,
    "question": "In OOP-based systems, what security consideration is essential for protecting sensitive data?",
    "optionList": [
      "Publicly exposing all data attributes",
      "Limiting the use of access control mechanisms",
      "Ensuring proper authentication and authorization mechanisms",
      "Ignoring input validation to simplify code"
    ],
    "answer": 2
  },
  {
    "Id": 672,
    "question": "What is the primary focus of application architecture design in real-world OOP applications?",
    "optionList": [
      "Micro-optimizations within individual classes",
      "Designing the overall structure and organization of the software system",
      "Implementing low-level algorithms for specific tasks",
      "Ensuring code readability and documentation"
    ],
    "answer": 1
  },
  {
    "Id": 673,
    "question": "What is a primary focus of application architecture design in real-world OOP applications?",
    "optionList": [
      "Writing code without any comments or documentation",
      "Designing the overall structure and organization of the software system",
      "Implementing low-level algorithms for specific tasks",
      "Ensuring code readability and maintainability"
    ],
    "answer": 1
  },
  {
    "Id": 674,
    "question": "Which aspect is a primary focus of application architecture design in real-world OOP applications?",
    "optionList": [
      "Low-level optimization techniques",
      "Efficient memory allocation strategies",
      "Designing the overall structure and organization of the software system",
      "Implementing platform-specific features"
    ],
    "answer": 2
  },
  {
    "Id": 675,
    "question": "What is a key consideration in large-scale software development using OOP principles?",
    "optionList": [
      "Minimizing code readability to increase performance",
      "Encapsulating all data within global variables",
      "Managing dependencies and ensuring modular design",
      "Avoiding code documentation to save time"
    ],
    "answer": 2
  },
  {
    "Id": 676,
    "question": "What aspect is a primary focus of application architecture design in real-world OOP applications?",
    "optionList": [
      "Minimizing code duplication",
      "Maximizing code complexity",
      "Implementing platform-specific features",
      "Designing the overall structure and organization of the software system"
    ],
    "answer": 3
  }
]